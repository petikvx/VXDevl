


<html>

<head>
<title>The TechnoWarriors HandBook (Revision 2)</title>
<body background="miback01.gif" topmargin="0" leftmargin="0">
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>

<p>&nbsp;</p>

</td></tr><!--msnavigation--></table>
<table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td valign="top" width="1%">

</td><td valign="top" width="24"></td><!--msnavigation--><td valign="top">


      <p align="center">&nbsp;
      <p align="center" style="word-spacing: 0; line-height: 100%; margin-left: 0; margin-right: 0; margin-top: 0; margin-bottom: -6"><font face="Times New Roman" size="5" color="#800000"><b><i>REVISION 2 - WORK
IN PROGRESS&nbsp;&nbsp; -Philip John Jatzek -</i></b></font></p>

<p align="center" style="word-spacing: 0; line-height: 100%; margin-left: 0; margin-right: 0; margin-top: 0; margin-bottom: -6">&nbsp;</p>

<hr>
<p style="text-indent: 0; word-spacing: 0; line-height: 150%; margin-left: 0; margin-right: 0; margin-top: 8; margin-bottom: 8" align="center"><b><font face="Times New Roman" size="6"><u>The TechnoWarriors Handbook
(Second Edition)</u></font><font face="Lucida Handwriting" size="2">&nbsp;</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin-left: 0; margin-right: 0; margin-top: 8; margin-bottom: 8" align="center"><font face="Lucida Handwriting" size="4" color="#0000FF"><b>Conceived
And Written By Philip John Jatzek</b></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin-left: 0; margin-right: 0; margin-top: 0; margin-bottom: 5" align="center"><i><b><font size="2" color="#800000">The TechnoWarriors HandBook COPYRIGHT (c) 1993-2000 By Philip John Jatzek ALL RIGHTS RESERVED!</font></b>
</i></p>
<hr>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin-left: 0; margin-right: 0; margin-top: 0; margin-bottom: 5" align="center"><i><font size="1" color="#800000">This
page is for PUBLIC VEIWING ONLY! It is not to be downloaded, exploited,&nbsp;
reproduced or stored in any way, shape or form in full&nbsp; or in any part of
this work! This work is protected by copyright law! This web page <a href="http://www.mnemonicrom.com">www.mnemonicrom.com</a>
is the only legal viewing place for this work to be displayed. The Author (The
Copyright Holder) maintains all legal rights to this work and can pull it from
public view at any time at his discression. The Author allows internet links to
this page, but does not allow copies of this work to be made. You may not
rerpoduce this work. Any and all reproduction or exploitation of this work in
its entirety or part must be pre-authorized in writting by the copyright holder
(The Author). You can contact the author at the email address attached to the
end of this work. THANK YOU!</font></i></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin-left: 0; margin-right: 0; margin-top: 0; margin-bottom: 5" align="center"><font size="1" color="#800000"><i>DISCLAIMER
and AGREEMENT:</i></font> <font size="1" color="#800000"><i>Before you read any
further into this work you must fully agree to the following. If you do not
fully agree and understand the following please refrain from reading the rest of
this work as the author no longer authorizes you to view it. The author (The
copyright holder) will be in no way be held&nbsp; responsible or libable fo the
use and/or abuse of the contents of this work. Further more any damages and
liabilities arrising from the use of this book&nbsp; rests solely on the parties
or party that has agreed to the terms of this disclaimer/agreement and not the
author (The copyright holder). By reading this work you accept full
responsibilities for any/all legalities and actions arrising,, any/all legal
rights against the author regaurding this work are waved. In other words,
Absolutely NO ACTION AND/OR ACTIONS will be inflicted apon the author of this
work. This book is meant for educational and entertainment purposes only and is
in no way attributed to any/all applications developed from use of the
information contained within this work. You are fully aware that the author hold
exclusive rights and all rights to this work under copyright law and will not
break or infringe apon those rights. If you have agreed not to take legal action
of any kind,agaisnt the author (The Copyright Holder) in any way,shape or form
you are authorized to read this work. This does not mean that once you have
finished reading this work you can take legal actions against the author as this
would have broken the disclaimer/agreement thus breaking copyrights. If you have
not agreed or fully understood any part of this disclamer/agreement please
dicontinue reading this work now as the author revolks your rights to it. If you
fully understand and aggree to the disclaimer/agreement you can continue reading
this work.&nbsp; The Author - Philip John Jatzek -</i></font></p>
<hr>
      <p style="text-indent: 0; word-spacing: 0; line-height: 150%; margin: 0" align="left"><u><font size="6" color="#800080">INTRODUCTION:</font></u></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 113%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 113%; margin: 0" align="left"><font size="3">&nbsp;<font face="Arial">&nbsp;&nbsp; 
        The Earlier Release Of This Book, written under pesuedo name, was in no 
        way complete. It suffered many flaws, and was written specifically for 
        the AMIGA computer and its operating system (don't get me wrong I still 
        think to this day that the AMIGA was the best computer ever</font></font> 
        <font face="Arial"> <font size="3">built, it</font> <font size="3">just 
        didn't evolve fast enough to keep me interested or challenged so I moved 
        on to Intel</font> <font size="3">and the Windows operating system). I 
        truely wish someone had ported over the AMIGA</font> <font size="3">ACTION 
        REPLAY and ASMONE assembler for the Intel Based Platform. In Any Case, 
        this</font> <font size="3">book is meant for the advanced assembly langauge 
        guru and not beginners as I do not go into</font> <font size="3">how to 
        program in assembly language, but rather what you can do with the knowledge 
        you hopefully</font> <font size="3">by now have aqquired. I will at the 
        end of this book list reference material that you can spend reading</font> 
        <font size="3">thouroughly or as reference to increase your skills and 
        knowledge of assembly language and hardware so you can</font> <font size="3">make 
        full use of this book. Unfortunately it will only be intel machine based 
        books that I aqquired to</font> <font size="3">master the langauge and 
        hardware as all my amiga books are gone. So bare with me if my programming</font> 
        <font size="3">skills seem a bit different than what you are use to as 
        I am carrying over my apple, amiga, TRS 80,</font> <font size="3">and 
        atari programming skills with me as I conquor this new to me, but old 
        to the rest of you, machine.</font></font></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 113%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 113%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;</font></b><font face="Arial">&nbsp; 
        This book is devided into four main parts as well as a useful appendix. 
        The main purpose of this book is to show you (and to he rest of the world) 
        how stupidly we evolved a system that is now running our world and how 
        easily it is to defeat it. Control virus construction and use can manipulate 
        even the most secure of systems, perhaps even one day be the basic blueprints 
        be used in biological manipulation. To make this a very brief introduction 
        a control virus consists of three parts, one; being the control virus 
        itself, two;the remote system interface in which the control virus is 
        manipulated and three; the uploaded code segment on which the control 
        virus gives command to, being a program that is run on the host machine 
        and manipulated by the remote interface. Those are the basic components 
        needed to control any system (provided they are in place). There is much 
        more than simpley designing and implementing these three items, you must 
        learn from hackers, crackers and programmers to be able to infect a host 
        with a control virus. If you can not infect the host, you can not control 
        the host. So I will try to write as many techniques in infecting a system 
        as I come accross while writing this book. The first three chapters will 
        be totally devoted to creating, implementing and operating control viruses, 
        the last chapter will be on hardware. Hardware alone opens new and improved 
        methods on manipulating data streams to your advantage on your quest to 
        infect systems with your personally designed control virus code.&nbsp; 
        Be aware that if you are to fully master this book you will need to fully 
        learn and understand both assembly language programming (specific to the 
        host system you wish to infect) and analog/digital electronics as a means 
        of intercepting, delaying and inserting data transmissions in progress. 
        I'm sure this book will be a valueable tool to even the most advanced 
        TechnoWarrior.</font></p>
      <hr>
      <p style="text-indent: 0; word-spacing: 0; line-height: 150%; margin: 0" align="left"><b><u><font size="6" color="#800080">DESIGNING 
        CONTROL VIRUSES:</font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 150%; margin: 0" align="left"><b><u><font size="3"><br>
        </font><font size="4" color="#0000FF"> CONTROL VIRUS DEFINITION</font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp; 
        Control viruses are simply this, a piece of executable code disigned to 
        infect a (Target) host system and accept then execute any uploaded code 
        it recieves for online manipulation of the (Target) host system. It sounds 
        pretty simply, and is, if you are a very good assembly lagauge programmer. 
        The only true problems that arrise is with communicating with the control 
        virus (which will be covered later). Using a control virus utilizing upload 
        and execute capability you can simply upload any program you have designed 
        and have it run on the (Target) host system. This means you can upload 
        and execute a file server or a system debugger / monitor or even a game 
        trainer (good for unlimited lives and maximum funds, smirk) and begin 
        exploiting the control virus infected host system. The control virus itself 
        will attach iteself to the host system and scan the socket (using internet) 
        for an activation password. If an incorrect activation password is gotten 
        then it is ignored and the control virus continues scanning for an activation 
        password. Once the activation password is gotten, the control virus should 
        lock the host system so the system operators can not intrude or get rid 
        of you (only by unplugging the machine) this mainly is working on a hidden 
        screen, locking the keyboard control out and protecting the memory you 
        are utilizing from any and all intrusions. After the system is good and 
        locked the control virus waits for your upload, which of course you upload 
        and the control virus passes execution to. From here on in its all fun, 
        you have control of your uploaded program, and can completely rape any 
        system thats been infected with it. From actual memory or file manipulation 
        to changing executing code in progress.</font> <font face="Arial">The 
        sky is the limit if you are a very good machine lagauge programming, and 
        learning the hex / binary reperestation of the instruction set will help 
        GREATLY in your endevours. Once all your exploitation is done you simple 
        have the control virus shut down the executing upload, erase all traces 
        of it from the host system memory (and media if need be) and have it restore 
        itself to normal operation waiting for the next upload (or erase itself 
        even if you want to fully earse your tracks). Hopefully, if this is done 
        correctly, you can exploit a system for months, perhaps even years until 
        you are found out or your virus detected. A good virus is one that can 
        never be detected or can not be easily removed, these will be explained 
        later on. For now, I'm sure you have a pretty good idea of what a control 
        virus is, time to move on to detail.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF">TRIPLE 
        KEY COMMUNICATION DEFINITION</font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp; 
        Triple Key Communication is a form of communication between the control 
        virus located on the (Target) host system and you the remote system (remote 
        system interface for the control virus). It was developed as a means to 
        bypass character masked systems (binary key does this better also bypassing 
        hardware encrypted systems and will be explain later). Character masked 
        systems only allows for certain asc codes to be sent to / or recieved 
        the host system and remote system. Character masked were designed as a 
        means to strip control characters (and other asc codes) out of data transmission 
        as so they would not affect the operation of the host system. BBSs (bulletin 
        board systems) use to use this on their online menu systems where as only 
        the asc codes represention alphanumeric codes were accepted as input and 
        all others were masked out (stripped). This prevented any unwanted keycodes 
        to be sent or recieved from remote systems.</font> <font face="Arial">These 
        character masks</font> <font face="Arial">made it impossible to upload 
        a program to the host system as some of the asc codes would be blocked 
        (unless you were lucky enough to bypass the upload / download stream of 
        a binary file transfer) and the program would not run with missing codes 
        (ie: hex codes that make up the instructional set of a working program), 
        and the host system would crash if the program was executed.&nbsp; However 
        a set of 3 characters used to makeup the 256 character codes that the 
        intel computer uses (keycodes, hex values for mnemonics, values, etc) 
        could and can bypass all forms of character masks. By remapping the 256 
        computer characters into a series of 3 characters that the host does not 
        mask out, you can communicate to your control virus by simply sending 
        3 character sequences instead of the normal asc codes, the control virus 
        would then translate the triple key communicated code into its hexidecimal 
        values and presto, you have uploaded a program that uses all 256 codes 
        in communicating to and from the remote system directly to the (Target) 
        host system. The encoding and decoding of triple key comminication is 
        all dependant on what is currently running on the host system. Meaning 
        it only works if the control virus itself or the uploaded program that 
        it is running, does all the translation. In any case, you get the idea.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">HOST 
        SYSTEM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        COMMUNICATION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REMOTE SYSTEM</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#800080">CONTROL 
        VIRUS</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF0000"> 
        &lt;------ AAB-BAC--CAB---&gt;</font>&nbsp;&nbsp; <font color="#0000FF">REMOTE 
        SYSTEM</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#800080">UPLOADED 
        PROGRAM&nbsp;</font>&nbsp;&nbsp; <font color="#FF0000">&lt;------ ABC-CBA-ACB----&gt;&nbsp;</font>&nbsp;<font color="#0000FF"> 
        INTERFACE</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF"> 
        BINARY KEY COMMUNICATION DEFINITION<br>
        </font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp; 
        Binary Key Comminication was spawned from triple key comminication as 
        a means of bypassing hardware encrypted systems (such as SDI). This is 
        also another brainchild of the author. How it works is very simular to 
        triple key langauge that bypasses character masks. It translates asc codes 
        into their binary representations. Meaning one hex value is broken up 
        into its binary representation and then sent to and from the (Target) 
        host system. You are problably asking by now, well if it's transmitted 
        in binary why bother using encoding and decoding it at all. The answer 
        is very simple, instead for communicating in ones and zeros the way it 
        is normally done the encoder and decoder transmits in TIME VARIATIONS. 
        Meaning that the 1 could be 0.003 of a second and the 0 could be 0.008 
        or any time sequence that you wish to use as long as it is measureable 
        by both the control virus and its remote system interface. Using time 
        as a means of binary key communication it no longer matters what data 
        is being sent or recieved by the host system, in fact the comminication 
        does not affect either data stream at all, only the timings of such transfers 
        are ever effected. So the host can merrily go on about its business and 
        you can diluge the host throughouly completely unmonitored as none of 
        the host data is ever manipulated. Meaning if they were scanning all sockets 
        (in internets case) for data you would remain completely invisible as 
        no data is changed in binary key communication. This basically follows 
        the same rules as triple key communication, the control virus (or uploaded 
        program) must preform the necessary encoding and decoding of binary key 
        comminication. Again, in any case, you get the idea.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">HOST 
        SYSTEM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        COMMUNICATION&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; REMOTE SYSTEM</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#800080">CONTROL 
        VIRUS</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF0000"> 
        &lt;------ 1110110110001----&gt;</font>&nbsp;&nbsp; <font color="#0000FF">REMOTE 
        SYSTEM</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#800080">UPLOADED 
        PROGRAM&nbsp;</font>&nbsp;&nbsp; <font color="#FF0000">&lt;------ 0010110101011----&gt;&nbsp;</font>&nbsp;<font color="#0000FF"> 
        INTERFACE</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp; 
        Note: That all the 1's and 0's represented in the communications (above) 
        are TIME VARIATIONS and are to be encoded and decoded by both the control 
        virus and the remote system interface inorder to work. You must also take 
        into consideration the data flow, so you protocol must handle changes 
        in the data stream. Remember one byte sent is equal to one bit unless 
        you can manipulate the timing of bits in a byte to speed things up a little 
        (evil grin) and yes it's possible in case you are wondering becuase data 
        transmitted is in binary. So your communication protocol can use a few 
        bits per each byte to set up timmings for the bits that follow for communication 
        and stop communicating on a long pause (no data transmission) thus waiting 
        for the next set of bytes (or byte) to be sent to resume the communication. 
        Over and over again until your communication has been completely communicated. 
        You must sync your binary key communication and have some form of error 
        correction control simular to old protocols used for modem communication 
        (remember bulletin board file transfer protocols). That is why the first 
        few bits always sync the communication and a pause where data is not being 
        sent ends that portion of the communication which means you have to resync 
        to resume the communication on the next data transmission.&nbsp;</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b>&nbsp;&nbsp;&nbsp;&nbsp;</b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF">BUILDING 
        YOUR CONTROL VIRUS </font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp; 
        Building your control virus is not an easy task. It takes a lot of time 
        and patience as well as tools to get the job done efficiently and error 
        proof. The most important thing to know when creating your control virus 
        is not assembly language but rather the hexidecimal values and binary 
        construction of those assembly language mnemonics. The reason for this, 
        you must know how to change branch and subroutine values by a form of 
        indexing which is attached to the hexidecimal value of the mnemonic code 
        you wish to manipulate, this is done in binary. Also done in binary is 
        the registers, stack, etc parameters for mnemonic instructions such as 
        move. Knowing the binary rules to hexidecimal instruction will be of great 
        benifit to you and your endevours. For example, say you need to scan a 
        file for a branch or subroutine call, you can not scan it simply by the 
        name of the instruction, you have to search memory (or media) for the 
        hexidecimal value of the instruction then manipulate it. Say you want 
        to insert your branch or subroutine call to point to your control virus 
        located in memory instead of what it's currently indexed to, you must 
        know how to change the binary appendature to the hexidecimal instruction 
        (as well as a little math to find the correct index value for the number 
        of bytes forward or backward to jump to from the branch or subroutine 
        call). there are very few books that give detail on this type of information, 
        The intel reference set (noted in the reference section of this work) 
        is a very good place to start. Another good reference is simply using 
        a debugger or system monitor which can display binary, hexidecimal data 
        representation of the mnemonic instructions and manually hacking out the 
        indexing binary scheme amongst other things. The best tools you can use 
        in constructing a control virus is an assembler with a built in debugger 
        (say Turbo Assembler) combined with a system freeze montor (SoftIce is 
        good) to freeze the system and look into the internal workings of memory 
        and your control virus in a frozen state. Switching back and forth between 
        the frozen state and the real time state will uncover a lot of answers 
        for you as you try to master control virus programming. You may also find 
        that the dreaded GOTO command or branch instruction (frowned apon by many 
        programmers) is the best thing to ever happen to a virus writer. Subroutine 
        calls divulge information on the stack (meaning your virus code is not 
        completely invisible to the system if you trace the stack) which gives 
        information on the return addresses to the calling instruction whereas 
        branches do not. If you use branches make sure to save and restore all 
        the data from the code that your control virus was branched to from so 
        you don't crash the calling code apon return. Best to do this in predefined 
        allocated variable (your own created stack) then relying on the system 
        as to remain invisible to it. Using this method is very good becuase it 
        does not divulge any information to the system when transfering control 
        back and forth between programs, meaning it can not be monitored. Only 
        use a subroutine call where it is absolutely necessary and be aware it 
        could be montored by the system by means of the stack. Here's an overview 
        of the control virus construct.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">CONTROL 
        VIRUS OVERVIEW</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#008000">HOST 
        SYSTEM</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#008000">REMOTE SYSTEM</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#800080">VC 
        LOADER</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        MEDIUM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#0000FF">CONTROL VIRUS</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#800080">CONTROL 
        VIRUS</font><font color="#FF0000">&lt;---------</font>COMMINICATION<font color="#FF0000">------&gt;</font><font color="#0000FF">REMOTE 
        SYSTEM</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial" color="#0000FF">UPLOAD 
        MODULE</font><font face="Arial"><font color="#FF0000">&lt;--------</font>PROTOCOL<font color="#FF0000">--------------&gt;</font><font color="#0000FF">INTERFACE</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b>&nbsp;&nbsp;&nbsp;<font face="Arial"> 
        A control virus isn't simply one program, it is composed of many parts 
        utilizing many techniques in such a way as to create an efficient hand 
        in hand working system. Starting from the ground up. You first write you 
        control virus. Then you write you control virus loader. Then you develope 
        you infection and implementation system so both the loader and control 
        virus work hand in hand when infecting systems. Then you develope your 
        remote system interface and the communication protocol between your control 
        virus and the remote system interface. Then after all that, you work on 
        your upload and execute modules that are to be used for the control virus 
        itself. Sounds like a lot of work, well it is, imagine if I explained 
        it in great detail. Hopefully by the end of this work you will have grasped 
        a pretty good idea on how to construct your own control viruses as well 
        as learned some new skills in programming techniques that are not usually 
        descussed or implemented in real world applications. When you are all 
        finished, you can sit back in your armchair and reach out to control virus 
        infected systems operating them much like you would a typical application 
        program and enjoy your hard labour from the comfort of your own home (or 
        moving vehicle). So enough with the preliminaries, let's get on with the 
        workings.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF">LINKING 
        AND EMBEDDING VIRAL CODE</font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp; 
        Linking And Embedding the Control Virus is very important and must be 
        done accurately, one small mistake and you will crash the host system 
        and more than likely you hard work making the virus will be detected and 
        dealt with. I am going to explain in a backwards style as to the way you 
        would actually implement these techniques so it will make more sense to 
        you. Linking is to take one line of code from an already executing program 
        or function (ie: rom overlay, exec program, system libraries and os interrupts) 
        and replace it with another that will execute your control virus code. 
        First you copy your virus code into memory using a control virus loader 
        (which by the way must be part of your virus infecting code so that the 
        control virus will load into memory and execute) What happens is your 
        control virus loader writes the control virus code somewhere in memory 
        and then looks for something to link to so that the control virus code 
        will execute regularly. Once a link is found (say keyboard routine, video 
        routine or communications routine) it will take one line of its instructional 
        code and store it near the end of the control virus code. Next the control 
        virus loader replaces the copied instruction with either a branch or subroutine 
        call to the actual control virus code. The actual virus code block is 
        made up of typical assmely langauge ssubroutine conventions. meaning that 
        it saves all registers, stack, heap, etc before executing the viral code 
        and restores them when complete. The second to line of the control virus 
        code is where you insert the instruction you copied from the original 
        linkable code. And the last line of code is simply a branch or return 
        from subroutine to the next line of code just after the link you placed 
        in original program or function. For simplicity I will try to draw a visual.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">BEFORE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        AFTER...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        ....</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial" color="#0000FF">NORMAL&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        LINKING TO&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        &nbsp; CONTROL VIRUS</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial" color="#0000FF">SYSTEM 
        FUNCTION&nbsp;&nbsp; SYSTEM FUNCTION&nbsp;&nbsp;&nbsp; STRUCTURE </font><font face="Arial" color="#000000">(CV 
        = Control Virus)</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#008000">system 
        function</font> <font color="#FF0000"> -----&gt;</font>&nbsp;<font color="#008000"> 
        system function</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        --BEGINNING OF CV CODE BLOCK--</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#008000">function 
        code&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#008000">function code</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#800080">Save All Registers</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#800080">LINK TO CV</font>&nbsp;<font color="#FF0000">---------&gt;</font>&nbsp; 
        <font color="#800080">Control Virus Code</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#008000">function code&nbsp;&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#800080">Restore All Registers</font><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        &nbsp;&nbsp;&nbsp; <font color="#008000">Original Instruction Copied Here</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        &nbsp; <font color="#800080">Return to next line of original function</font><br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        --END OF CV CODE BLOCK--</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b>&nbsp;&nbsp;&nbsp;<font face="Arial"> 
        As you can see above. The link to the Control Virus is copied just before 
        the branch / return at the end of the control virus code block. This is 
        done so that it is executed as so that the linked program or routine functions 
        normally without any problems. Always remember to save and restore all 
        possible information before and exiting your control virus code block, 
        one small oversight and you could cuase the original program or function 
        to operate incorrectly. A bug in the system is quickly seen and soon to 
        be correctly. If corrected there goes your nice peice of hard work. Linking 
        can be prefromed anywhere in a program or function only as long as it 
        is in a place that gets executed. Linking over a data segment will not 
        do anything as it never gets executed. Doing a scan of the program you 
        wish to link to before actually linking is a very good idea. For instance, 
        you scan for a branch, subroutine call or or subroutine return using the 
        hex values (and binary) of the instructions themselves. Once found you 
        copy then overwrite the instruction (as long as your branch or subroutine 
        call will not overwrite into the next instruction of the program you wish 
        to link to. If your link code is smaller (in hex size) than the actual 
        instruction you copied and wish to overwrite, simple use NOP (no operation) 
        commands to pad the instruction to the next instruction allowing a return 
        to the next instruction in the original program.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b>&nbsp;&nbsp;&nbsp;<font face="Arial"> 
        Now for embedding. Embedding is usually always used for media infection 
        (Not media files like mpeg etc, but media such as harddrive files and 
        floppy files). It can be applied to memory as wel, but why bother since 
        you have all the free memory at your disposal and the link can point just 
        about anywhere. Embedding control virus code into a file that can and 
        will be executed is pretty straight forward but requires two steps to 
        be efficient. The first step is designing the control virus loader (a 
        small routine to get the control virus into memory and then execute it 
        so it can link up and become operational) and the second is the control 
        virus (which can be located anywhere on the media). First, you embed you 
        control virus loader into the executable file, can be anyplace within 
        the file as long as you put a branch over your control virus loader code 
        as to not interfer with the normal operation of the executable file. After 
        this is done you then attach your a link in the target executable file 
        so that it points to your control virus loader, third you then copy the 
        control virus code into non used sectors on the media which contains the 
        executable file. This is what the loader will load into memory and then 
        execute. The loader is all that is really needed to be attached to executable 
        files (or system subroutine libraries). When the loader gets executed 
        it loads the actual virus code of the sector blocks on the media on which 
        it was placed. This cuts back on overhead as the bigger the file attachment 
        the more likely it is going to get noticed.&nbsp; The loader should only 
        execute once and never again otherwise you will have multiple copies of 
        the control virus all running at once which will slow down the system 
        and may get noticed by the administrator.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">So 
        remember, only attach the loader to the program files and keep the actual 
        control virus code hidden on the sectors of the media. Here is a basic 
        pictorial.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial" color="#0000FF">SOLID 
        DISK FILE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        SECTOR BLOCKS CONTAINING</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial" color="#0000FF">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        CONTROL VIRUS CODE SEGMENTS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">PROGRAM 
        CODE BLOCK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF0000"> 
        +--&gt; </font>DISK SECTOR 1</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#008000">program 
        code&nbsp;&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        |&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800080">CV 
        CODE segment 1</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#800080">link 
        to CV loader</font>&nbsp;<font color="#FF0000"> -------+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        |&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#000000">DISK 
        SECTOR 2</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#008000">program 
        code</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        |&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800080">CV 
        CODE segment 2</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#800080">Branch 
        Over VC Code</font><font color="#008000"> </font><font color="#FF0000">|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        |&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#008000">&nbsp;&nbsp; </font><font color="#000000">DISK 
        SECTOR 3</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#800080">CV 
        loader Code&nbsp;</font> <font color="#FF0000">&lt;-------+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        |</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800080">CV CODE Segment 
        3</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#800080">Sector 
        Log Holding Variable</font><font color="#FF0000"> ---+&nbsp;&nbsp;&nbsp;</font>&nbsp;&nbsp; 
        DISK SECTOR 4</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#008000">Program 
        Code</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#800080">CV Code Segment 4</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">END 
        OF PROGRAM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        ... and so on ...</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b>&nbsp;&nbsp;&nbsp;<font face="Arial"> 
        As you can see by the above asc pictorial, the loader is totally responsible 
        for keeping tracks of the actual control virus code segments located on 
        random sectors on the media. This is easily done with a built in hardwired 
        variable value that gets written into the loader code automatically each 
        time it infects another media source. Remember to FLAG this hardwired 
        variable per each media it writes the control virus, to AND NOT each time 
        it infects a file, This means, only one copy of the actual virus code 
        written per media flagged (unless you want a backup source in case the 
        first one fails) otherwise each time the control virus infects a new executable 
        file (or subroutine library) more and more disk space will be used on 
        the system and a weary administrator might suspect something. So simple 
        rule, the loader can infect as many files as it can attach itself and 
        is usualy very small, just enough to get the job done,and utilize one 
        or more media sources to obtain the actual control virus code (which is 
        bulky enough to lock the system, preform the communication, password getting, 
        uploads and execute). Once the control virus code is loaded into memory 
        (by the loader) it is then linked to anything that will execute it regularly. 
        For example, if you want to scan the sockets (for internet)&nbsp; for 
        an&nbsp; activation password before uploading simply link to the functions 
        that handle socket access by a search, find and link. Always link to something 
        that you know will execute frequently. This way you can check the socket 
        access without writing many lines of code to do so becuase the function 
        that you linked too does most of the work for you. Better yet your control 
        virus is garenteed to execute everytime that routine is executed.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">If 
        you have fully understood the material presented on linking and embedding 
        so far, you are ready for the next part of embedding code..</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp; 
        Embedding code into files in such a way that the file sizes do not change 
        is very easy. You simply follow the rules for linking control virus code 
        and apply it to embedding. You simply obtain the Control virus loader 
        size in bytes, go to the file that you are going to link to, take some 
        random location in it and then copy the original files bytes over to the 
        virus code located on the sectors of the media, then overwrite the original 
        files (the bytes you copyed) with the control virus loader code, add you 
        control virus loader activation link and presto, you have now setup your 
        loader within the target file without changing its file size. If this 
        sounds complicated just review the past material and it will become clearer. 
        Here's a pictorial of how it works.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">BEFORE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        AFTER....&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .....</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial" color="#0000FF">ORIGINAL 
        FILE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SOLID MEDIA 
        FILE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        SECTOR BLOCKS CONTAINING</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial" color="#0000FF">COLORED 
        SEG&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; LINKED AND EMBEDDED&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        CONTROL VIRUS CODE&nbsp;</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial" color="#0000FF">COPIED 
        THEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SO FILE 
        SIZE DOES NOT&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        SEGMENTS&nbsp;&nbsp;AND ORIGINAL</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial" color="#0000FF">OVERWRITTEN&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        CHANGE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        PROGRAM BLOCK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">PROGRAM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        PROGRAM CODE BLOCK&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF0000"> 
        +--&gt; </font>DISK SECTOR 1</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#008000" face="Arial">program 
        code</font><font face="Arial"><font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        program code&nbsp;&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        |&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800080">Restore 
        Target File</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#800080">program 
        code</font><font color="#FF0000">-----+</font><font color="#800080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        link to CV loader</font>&nbsp;<font color="#FF0000"> -------+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        |&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#000000">DISK 
        SECTOR 2</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#008000">program 
        code&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#FF0000">&nbsp;&nbsp; 
        |&nbsp;&nbsp;</font><font color="#008000">&nbsp;&nbsp;&nbsp;&nbsp; program 
        code</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF0000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        |&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800080">CV 
        CODE segment 1</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#800080">program 
        code&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </font><font color="#FF0000">|&nbsp;</font><font color="#800080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        Branch Over VC Code</font><font color="#008000"> </font><font color="#FF0000">|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        |&nbsp;&nbsp;&nbsp;&nbsp;</font><font color="#008000">&nbsp;&nbsp; </font><font color="#000000">DISK 
        SECTOR 3</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#800080">program 
        code</font><font color="#FF0000">--+&nbsp; |&nbsp;</font><font color="#800080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        CV loader Code&nbsp;</font> <font color="#FF0000">&lt;-------+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        |</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800080">CV CODE Segment 
        2</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#800080">program 
        code&nbsp;&nbsp; </font><font color="#FF0000">|&nbsp;&nbsp; |</font><font color="#800080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        Sector Log Holding Variable</font><font color="#FF0000"> ---+&nbsp;&nbsp;&nbsp;</font>&nbsp;&nbsp; 
        DISK SECTOR 4</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#008000">program 
        code&nbsp;&nbsp;</font><font color="#FF0000"> |&nbsp;&nbsp; +--&gt;</font><font color="#008000"> 
        Program Code</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF0000">&nbsp;+-----------&gt;</font><font color="#008000">copied 
        program code</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">END 
        OF PROG&nbsp; <font color="#FF0000">|</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        END OF PROGRAM&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF0000">&nbsp;&nbsp;|&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        ... AND SO ON ...</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#FF0000">+------------------------------------------------+</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b>&nbsp;&nbsp;&nbsp;<font face="Arial"> 
        Is it starting to look complex? Well it's not. following the red arrows 
        you should see exactly what needs to be copied from the target file, copied 
        to where, and overwritten with what. This simple process will always retain 
        the original file size wether it is a program on media or in rare cases 
        a program in memory. When the loader execute within the target file, it 
        will go to its sector log (a hardwired variable containing sector data 
        for which the actual control virus code it located) and begin copying 
        the control virus to memory. After it has been fully copied it will be 
        executed. After executation the control virus setup will take all the 
        original file data and overwrite the control virus loader with it (don't 
        worry this only affects memory and simply gets rid of it, it does not 
        destroy your loader on media that gets executed everytime the file (or 
        system routine) gets executed) thus restoring the original file to its 
        original state whereas it can operate as it was intended to with the control 
        virus completely loaded, setup and executing. After the copied original 
        file data has been restored it can be discarded completely as it only 
        needs to be used after the loader sets up the control virus code off the 
        sectors and the file needs to be restored so it can execute properly. 
        With this simple linking and embedding information you should be able 
        to evolve it. Use your imagination. However imagination is nothing without 
        the ability to bring it into reality, so I suggest you read lots of books, 
        and play with software that can manipulate the computer system in such 
        a way as you can see its operation.Softice, magic game creator, tasm, 
        disassemblers, hex editors, all of these will show you what is going on 
        within your computer as you master it. On to the next topic.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF"> 
        VECTOR INTERUPT TABLE</font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp; 
        The Vector Interrupt table, how nice of them to build the system with 
        a sequential list of subroutine calls. Even better is that it points to 
        where they are all located in memory. There are two types of routines 
        that can be found utilizing the vector interrupt table. One is ROM (Read 
        only memory) routines that are burned into an eprom and can only be bypassed 
        by means of a rom overlay provided the hardware manufactures allow for 
        such a task to be done and the second is the OS (operating system) which 
        sets up the vector interrupt table so that it points to it's routines 
        loaded into memory, which can be changed easily. You do not want to attack 
        the vector interrupt table directly when implementing your control virus 
        as it is the easiest thing to monitor on a computer system, what you want 
        to do is read the addresses stored there so you know where all the subroutines 
        are located in memory and then link into those subroutines so that when 
        the vector interrupt table calls that routine your control virus code 
        gets executed along with it. Here's the overview.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">VECTOR&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">INTERRUPT 
        TABLE&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        SYSTEM MEMORY ..&nbsp;&nbsp; .....</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">038 
        <font color="#008000">Address To Routine</font>&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#FF0000">+-&gt; </font><font color="#008000">Start Of Routine</font> 
        <font color="#FF0000">+---&gt; </font><font color="#800080">CV CODE BLOCK</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">039 
        <font color="#008000">Address To Routine</font>&nbsp;&nbsp;&nbsp;<font color="#FF0000">&nbsp;&nbsp; 
        |&nbsp;</font>&nbsp;&nbsp;&nbsp; <font color="#008000">Routine Code</font>&nbsp;&nbsp;&nbsp;<font color="#FF0000">&nbsp; 
        |</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800080">Control 
        Virus Code</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">03A 
        <font color="#008000">Address To Routine</font> <font color="#FF0000">---+</font>&nbsp;&nbsp;&nbsp; 
        <font color="#800080">CV LINK</font> <font color="#FF0000">-----------+&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#008000">Copied Routine Instruction Code</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">03B 
        <font color="#008000">Address To Routine</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#008000">Routine Code</font> <font color="#FF0000">&lt;--------</font> 
        <font color="#800080">Return To Routine Code</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">... 
        AND SO ON ...&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#008000">End Of Routine</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#800080">END OF CV CODE</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp; 
        As you can see by the above, it is very simple to implement your control 
        virus into a system using the vector interrupt table. Even better, you 
        can link two or more routines that use this table so that each time any 
        routine is run it executes the control virus code (The more the merrier). 
        Not only can you fully exploit the vector interrupt table but also the 
        programs which are loaded into memory themselves (using windows just scan 
        the PID or manually scan and test the stack) and the system libraries 
        which programs call for subroutines (using windows these would be the 
        DLL files) . This creates a vast resource of code which eventually gets 
        executed in which to link your control virus is also executed in the prcoess. 
        So, you have design your control virus loader carefully for it to know 
        what to attach the control virus links to (or embed it). The vector interrupt 
        table is the most easiest as it lists all the subroutine addresses in 
        a nice orderly fashion so you can manipulate them. In advanced control 
        viruses you should always check the stack first (and possibly backtrack 
        where needed) to see if anything is monitoring the Vector interrupt table 
        before you read it, then take the appropriate steps to bypass the monitoring 
        program (doesn't matter how big your control virus is, the loader is small, 
        and loads the control virus off the media, but try to keep it within reason).</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF">EXPLOITING 
        ROM BIOS</font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b>&nbsp;&nbsp;&nbsp;<font face="Arial">&nbsp; 
        There is programming then there is hardware programming (which is the 
        best). By hardware programming you bypass the operating system completely, 
        which means it no longer matters what operating system is running on the 
        Target system as your program will still be executable. There are three 
        ways to do this, One: Write a rom overlay, this redirects a normal bios 
        (or rom,eprom) routine to a routine in memory or linking onto an existing 
        rom overlay (this can be found in the vector interrupt table), two; burn 
        directly into the rom, you have to distribute roms (or eproms) with your 
        virus embedded in it (this means assembling your code then EXE2BIN it 
        and burn it onto the chip itself) and three; bios update, this goes directly 
        into the cmos where you can call memory resident code from within it (can 
        be done via programs such as flash bios updates which you should disassemble 
        and create your own).</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b>&nbsp;&nbsp;&nbsp;<font face="Arial"> 
        Exploiting the chips is great if you know how to do it as it lets you 
        infect hardware rather than computers themselves, from plane, trains to 
        guided missles. You need a few things to do this however, these include 
        The CPU for the system to infect, an eprom or prom, a debugger board and 
        of course the assembler for the chip (you need a computer still to compile 
        with). Let's say for example you were at war with another country, you 
        have a timed attack on them, you watch their mail and discover they ordered 
        a printer, you get the specs on that printer and then write your rom virus, 
        remove the eprom (or whatever) from the printer and insert your new one. 
        Now when you go to attack them the printer locks their computer up with 
        your nice timed virus code embedded in it. Geezz why isn't our computer 
        working, little lone why can't we get our computer to work (even with 
        cold boots). You can see the potential. Hardware is not safe from control 
        virus attacks, it's just a little more complex to implement them. You 
        can infect just about anything if you have the right equipment and knowledge. 
        Even though assembly langauge differs on all CPUs the basic outline for 
        them is the same. So your basic steps is first get all the equipment and 
        learn the assembly language, use a computer to write your code for the 
        chip, compile it, exe2bin it so you can burn it into an eprom, then burn 
        it and place it on a debugger board for testing. Once its all tested and 
        operational make lots of chips with your control virus (or other virus) 
        burnt in and and infect the system you wish to attack. There are many 
        ways to implement your virus, by selling them to the public, by making 
        a fake maintanance call to the place you wish to infect or even by putting 
        a virus directly into the compiler itself so that everytime it compiles 
        code for the chip it tags you virus code onto it as well.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF"> 
        MUTATION AND RUN AWAY CODE</font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp; 
        Mutation and Run Away Code Are two forms of protecting your control virus 
        against detection. The first is simply a form of changing the code around 
        so that your control virus is never has never the same code twice each 
        time it is written, this twarts of all known search, detect and destroy 
        techniques used to kill most viruses. This is done by placing random variables 
        with random values inside you code and putting a branch around the variables 
        to the next code block, in such a way that you code is broken up into 
        parts and random value blocks are inserted into it. You can also use randomly 
        located NOP (No Process) Instructions to cut up the code so you can not 
        search find and destroy the virus code, You use your descression. The 
        second is a detect and run away technique where as when anything tries 
        to access your control virus in memory or on media, it simply moves out 
        of the way and relocates itself thus avoiding detection. Use the first 
        method to protect your control virus when it is not running and the second 
        when your control virus is running. Together these make it very difficult 
        for someone to locate and get rid of your control virus.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF">FRAG 
        CODE (SELF REPARING)</font><font size="3"> <br>
        </font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp; 
        Frag code has to be one of my more complex coding techniques. It is basically 
        a control virus broken up into many parts, each part testing the other 
        parts with a checksum, if the chesum does not match it then repairs the 
        section of code that does not match with a copy of the original code, 
        thus making it impossible to damage the running control virus in any way 
        as it always test and repairs itself during operation.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <hr>
      <p style="text-indent: 0; word-spacing: 0; line-height: 150%; margin: 0" align="left"><b><u><font size="6" color="#800080">IMPLEMENTING 
        CONTROL VIRUSES:</font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="3"><br>
        </font><font size="4" color="#0000FF"> INFECTING A HOST BY INFECTING A 
        FILE<br>
        </font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b>&nbsp;&nbsp;&nbsp;<font face="Arial"> 
        There are many ways to infect a system, the most fool proof way is to 
        infect a file. That too, there are many ways to infect a file on a system 
        from trojan horses which mimic programs in order to have them run to media 
        infecting viral method in which all removable media gets infected. These 
        methods have been well documented over the years. the main idea is to 
        get the person to run your virus so that it is activated. A simple search 
        for hack on the internet will yeild many ways of infiltration.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF"> 
        INFECTING A SYSTEM BY BUFFER OVERRUNS<br>
        </font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp; 
        Buffer overruns (and sometimes buffer underruns) is simply this. A variable 
        is used for input, it is a defined size, if you go over the size limit 
        of the variable you begin overwriting what appears after the variable. 
        In this case, you are betting on overwriting the PC (program counter) 
        or infact the next line that it is to execute. In this type of infiltration 
        you break the bounds of the program variable and cause a buffer overrun. 
        Once you have broken the bounds you want to send your viral code followed 
        by nothing but branch statements all the way back to the start of the 
        viral code. This is done in hope that a branch statement will fall on 
        the PC (progrma counter) and be executed. Once executed the branch statements 
        are followed back to the first branch statement in turn which gives control 
        to the main viral code and you are in. Buffer underrun works the same 
        way but only in reverse. Many people say this will never happen, it is 
        impossible, well no it isn't, you just write a bounds breaker virus to 
        break the bounds. A good bounds breaker uses game training techniques 
        to find the actual bounds checking variable, this increments and decrements 
        for each character typed or removed. So a progressive search for all increments 
        and decrements of unknown values in a sequential character typed or character 
        removed fashion will most definately yield you the bounds checking variable. 
        From here you simple use your game training techniques to locate the compare 
        instruction and NOP (No Operation) it. Once the comparing instructions 
        are removed you can pump characters through the input stream both backwards 
        or forwards eventually overwriting the PC (program counter) and having 
        your code run. The input variable index is incremented and decremented 
        as per your input but never checked for the bounds so you can easily overwrite 
        the program code by forward indexing or backward indexing and eventually 
        have your overrun code executed.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <hr>
      <p style="text-indent: 0; word-spacing: 0; line-height: 150%; margin: 0" align="left"><b><u><font size="6" color="#800080">OPERATING 
        CONTROL VIRUSES:</font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="3"><br>
        </font><font size="4" color="#0000FF"> LOCKING THE HOST SYSTEM<br>
        </font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b>&nbsp;&nbsp;&nbsp; 
        <font face="Arial">When utilizing the target host system it is customary 
        to lock the system operators out of the computer when you do anything 
        that you do not want interrupted. This involves locking the keyboard so 
        the system operator can not type, redirecting I/O to a hidden page so 
        the system operator can not see what you are doing and halting any other 
        running programs so they can not interfer with your work.&nbsp;</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF"> 
        UPLOAD AND EXECUTE SYSTEM MONITOR<br>
        &nbsp; </font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font size="4" color="#0000FF"><u>RECORD/REPORT 
        AND RECORD/PLAY&nbsp;</u></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b> 
        <font face="Arial">&nbsp;&nbsp;&nbsp;</font> <font face="Arial">These 
        two techniques are very useful indeed. First Record and Report is used 
        to find the data entry on encrypted system. It recorded the actual keystrokes 
        and saves them to a file that can be picked up later by the control virus. 
        This is good for system operator account information such as administrator 
        logons as well as getting information that you would normally not be able 
        to get on encrypted systems. The second, Record and play is a technique 
        where as you record all outgoing calls (via modem or internet) and collect 
        all logon information in a script file so that your control virus can 
        call out to all the locations in the script file, log onto the system 
        (with the logon information recorded) and do what ever it has to do to 
        infect or manipulate the new system.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF"> 
        HOPSCOTCHING THE INTERNET (AVOID TRACING)<br>
        </font></u><font face="Arial"> &nbsp;&nbsp;&nbsp;&nbsp;</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"> 
        &nbsp;&nbsp;&nbsp; All us internet junkies by now probably know how eggbots 
        work for irc. Well this approach is very simular. You infect host systems 
        with a bot program which will call another host infected with a simular 
        bot (and so on) and report directly back to you (not advised) or a previous 
        bot programs until it reaches you (the remote). Doing this bot send and 
        recieve from one bot to the next on busy host systems makes it very difficult 
        to trace from the target host all the way back to you (the remote) as 
        data is transfered inbetween bots and not on a direct route. If someone 
        were to try a trace, it would go to the first bot&nbsp; communicating 
        with the target system and not directly to you as you manipulate it. In 
        order to find you (the remote) they would have to trace all the bots in 
        your bot list to the remote itself. The bots themselves can self destruct 
        (erase themselves) after you are finished with the target host. Even further 
        more, if your bot knows what files to delete on the host system on which 
        it resides you can delete the logs. This I call hopscotching. Even further 
        more, you can have a timed attack against the target system. meaning you 
        communicate to one bot, it waits for a specified time, then communicates 
        to the next bot, and it waits for a specified amount of time till it communicates 
        to the next bot, and so on and so on back and forth between the remote 
        and the target system. Doing this makes it virtually impossible to trace 
        as you no directly connected to the target system in real time.</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"> 
        &nbsp;</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#008000">REMOTE</font> 
        <font color="#FF0000">---&gt;</font> <font color="#008000">HOST1</font><font color="#FF0000"> 
        ---&gt;</font> <font color="#008000">HOST2</font><font color="#FF0000"> 
        ---&gt;</font> <font color="#008000">HOST3</font><font color="#FF0000"> 
        ---&gt;</font><font color="#008000"> HOST4</font> <font color="#FF0000">---&gt;</font> 
        <font color="#008000">HOST5 (TARGET)</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#FF0000">^&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#800080"> 
        CV1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        CV2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        CV3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        CV4&nbsp;&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <font color="#800080">CONTROL 
        VIRUS5</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#800080" face="Arial">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font face="Arial" color="#FF0000">&nbsp; 
        |&nbsp;&nbsp;&nbsp;</font><font color="#800080" face="Arial">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        RTM1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RTM2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        RTM3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RTM4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        MONITOR MODULE</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#800080" face="Arial">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font face="Arial" color="#FF0000">&nbsp; 
        |&nbsp;&nbsp;</font><font color="#800080" face="Arial">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        RTM5</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#FF0000">|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        <font color="#FF0000">|</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color="#FF0000">&nbsp; 
        +---------</font> <font color="#008000">HOST9</font> <font color="#FF0000">&lt;---</font> 
        <font color="#008000">HOST8</font> <font color="#FF0000">&lt;---</font> 
        <font color="#008000">HOST7</font> <font color="#FF0000">&lt;--- </font><font color="#008000">HOST6</font> 
        <font color="#FF0000">&lt;---------------+</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#FF0000" face="Arial">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</font><font face="Arial" color="#800080">&nbsp; 
        CV9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        CV8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        CV7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        CV6</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial" color="#800080">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        RTM9&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RTM8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        RTM7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RTM6</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial" size="2" color="#000000">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        CV=Control Virus , RTM=Recieve And Transmit Module</font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font face="Arial"><font color="#FF0000">&nbsp;</font></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF"> 
        WHO FRAMED ROGER RABBIT (REDIRECTION) </font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF"> 
        AUTOLAUNCH (TIMER RESPONSE) <br>
        </font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF"> 
        FTP DELIVERY</font></u></b></p>
      <hr>
      <p style="text-indent: 0; word-spacing: 0; line-height: 150%; margin: 0" align="left"><b><u><font size="6" color="#800080">HARDWARE 
        APPROACHES:</font></u></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="3"><br>
        </font><font size="4" color="#0000FF"> TAPPING INTO THE SYSTEM (INTERCEPTION, 
        DELAY AND INSERTION)<br>
        </font></u> </b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF"> 
        FREQUENCY JAMMING (THE ART OF OCTAVES AND LIKE FREQUENCIES)</font></u> 
        </b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="4" color="#0000FF">MASTERING 
        FLIP FLOP COMUNICATION</font></u> </b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
      <hr>
      <p style="text-indent: 0; word-spacing: 0; line-height: 150%; margin: 0" align="left"><b><font size="6" color="#800080"><u>APPENDIX:</u></font></b></p>
      <p style="text-indent: 0; word-spacing: 0; line-height: 150%; margin: 0" align="left"><b><font face="Arial">&nbsp;&nbsp;&nbsp;&nbsp; 
        This contains well commented source code techniques relative to the topics 
        covered in this work. There are presented here to show you that the topics 
        covered in this work do indeed work. They will be presented in squential 
        order as to how a control virus would be developed if you had to do it 
        from scratch. Let's Begin:</font></b></p>
<hr>
<p style="text-indent: 0; word-spacing: 0; line-height: 150%; margin: 0" align="left"><font face="Times New Roman" size="6" color="#800080"><b><u>REFERENCES:</u></b></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b>This
Is A List Of All My Relevant Books Related To This Project:</b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#FF0000"><blink>*</blink></font><font color="#800000">
Intel Pentium Pro Family Developer's Manual Volume 1: Specifications</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;&nbsp;<font color="#0000FF">&nbsp;<i>
<font size="2"> Intel Literature, Order Number 242690, 1996, ISBN 1-55512-259-0</font></i></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#FF0000"><blink>*</blink></font><font color="#800000">
Intel Pentium Pro Family Developer's Manual Volume 2: Programmer's Reference
Manual</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><i><font size="2" color="#FFFFFF">&nbsp;&nbsp;&nbsp;</font><font size="2" color="#0000FF">
Intel Literature, Order Number 242691, 1996, ISBN 1-55512-260-4</font></i></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#FF0000">*</font><font color="#800000">
Intel Pentium Pro Family Developer's Manual Volume 3: Operating System Writer's
Guide:</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><i><font size="2" color="#FFFFFF">&nbsp;&nbsp;&nbsp;</font><font size="2" color="#0000FF">
Intel Literature, Order Number 242692,1996, ISBN 1-55512-261-2</font></i></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#FF0000"><blink>*</blink></font><font color="#800000">
Programmer's Guide To The AMIBIOS</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;&nbsp;&nbsp;<i>
<font size="2" color="#FFFFFF"> </font><font size="2" color="#0000FF">
American Megatrnds, Windcrest/McGraw-Hill, 1993, ISBN 0-07-001562-7</font></i></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#FF0000"><blink>*</blink></font><font color="#800000">
Windows Programmer's Guide To DLLs And Memory Management</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;&nbsp;<font color="#0000FF">&nbsp;<font size="2"><i>
Mike Klein, Sams Publishing, 1992, ISBN 0-672-30236-5</i></font></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><blink><font color="#FF0000">*</font></blink><font color="#800000">
<blink> </blink>
Advanced Windows</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;&nbsp;&nbsp;<i>
<font size="2" color="#0000FF">
Jeffrey Richter, Microsoft Press, 1997, ISBN 1-57231-548-2</font></i></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#FF0000">*</font><font color="#800000">
Write TSRs Now</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;&nbsp;<font color="#0000FF">&nbsp;
<font size="2"><i>Popular Application Series Jim Ras, Wordware
Publishing, Inc,1993, ISBN 1-55622-335-8,</i></font></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#FF0000"><blink>*</blink></font><font color="#800000">
Mastering Turbo Assembler</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;&nbsp;<font color="#0000FF">&nbsp;<font size="2"><i>
Tom Swan, Hayden Books, 1989, ISBN 0-672-48435-8</i></font></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#FF0000"><blink>*</blink></font><font color="#800000">
80X86 IBM PC and Compatible Computers: Assembly Language,&nbsp;</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#800000">&nbsp;&nbsp;
Design and Interfacing Vol. I and II</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;&nbsp;<font color="#0000FF">&nbsp;<font size="2"><i>
 Muhammad Ali Mazidi, Janice Gillispie Mazidi, Prentice Hall Inc, 2000,
0-13-016569-9</i></font></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#FF0000"><blink>*</blink></font><font color="#800000">
Introduction to Assembly Language Programming: From 8086 to Pentium Processors</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#800000">&nbsp;
(Undergraduate Texts in Computer Science)</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;&nbsp;<font size="2"><i>&nbsp;<font color="#0000FF">Sivarama
P. Dandamudi, Springer, 1998, 0-387-98530-1</font></i></font><br>
<b><font color="#FF0000"><blink>*</blink> </font><font color="#800000">Assembly Language :
Step-By-Step</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;<font color="#0000FF">&nbsp;<font size="2"><i>&nbsp;
Jeff Duntemann, Wiley, 1992, 0-471-57814-2</i></font></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#FF0000"><blink>*</blink></font><font color="#800000">
Windows Assembly Language &amp; Systems Programming : 16- And 32-Bit Low-Level
Programming</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#800000">&nbsp;&nbsp;
for the PC and Windows</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;<font color="#0000FF">&nbsp;&nbsp;<font size="2"><i>
 Barry Kauler, R&amp;D Books, 1997, 087930474X</i></font></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#FF0000">*</font><font color="#800000">
Upgrading And Repairing PCs (Sixth Edition)</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;&nbsp;<font color="#0000FF">&nbsp;<font size="2"><i>
Scott Mueller, Que Corporation, 1996, ISBN 0-7897-1053-6 , 0-7897-0825-6</i></font></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><font color="#FF0000">*</font><font color="#800000">
The Complete PC Upgrading &amp; Maintenance Guide (8th Edition)</font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;<font color="#0000FF">&nbsp;&nbsp;<font size="2"><i>
Mark Minasi, Sybex Inc., 1997, ISBN 0-7821-2151-9</i></font></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><b><u><font size="5">(LINKS)</font>
This
Is A List Of All My Relevant Links Related To This Project </u><font size="5"><u>(LINKS)</u></font></b></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><font color="#FF0000"><blink>*</blink></font>
 <a href="http://hackersclub.com"><font color="#800000"><b>The
Hackers Club (Cracking, Hacking And Other Information)</b></font></a></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><font size="2"><i>
&nbsp;&nbsp;&nbsp;<font color="#0000FF"> Assorted Tools and tutorials on cracking and hacking
programs. Gain very valuable experience when uploading and manipulating a
monitor program to a (Target) host system using control viruses.</font></i></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><font color="#FF0000"><blink>*</blink></font>
 <a href="http://www.univweb.com/gb/trainers/"><b><font color="#800000">The Web
 Universe</font></b><font color="#800000"><b><u> (Game Training Tools)</u></b></font></a></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><font size="2"><i>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">  A very Good Game Trainers, Learn how
they work internally by using them, Not only does it allow you to play god in games
but serves as valuable experience for later locating and manipulating magic
numbers on target systems.&nbsp;</font></i></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><font color="#FF0000"><blink>*</blink></font>
 <a href="http://www.numega.com/drivercentral/icecentral.asp"><b><font color="#800000">NuMega
 SoftIce Central Page (Windows Debugger And Tools)</font></b></a></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left"><font size="2"><i>
&nbsp;&nbsp;&nbsp;<font color="#0000FF">   Only the best windows debugger ever
made. This is the main page for patches, updates and the SoftIce Debugger
itself. Experience in this will be a definate asset in your future endevours.
Well Worth Buying Comes With Detailed Manuals. Make Sure You Search For SoftIce
On This Page For Further Information On The NuMega Product. They Also Produce
SoftIce Driver Suite Amongst Other Very Useful Debugging Tools.</font></i></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="left">&nbsp;</p>
<hr>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="center"><font size="3"><b>I hope you enjoyed This
Work As Much As I Did Writting
It! If you Have</b></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="center"><font size="3"><b>have any suggestions, or want to make an addition to the
next revision of</b></font></p>
<p style="text-indent: 0; word-spacing: 0; line-height: 100%; margin: 0" align="center"><font size="3"><b>This
Work, With Full Credit Of Course,&nbsp; please feel free to contact me at</b></font></p>
<p style="word-spacing: 0; text-indent: 0; margin: 0" align="center"><b><font size="3"><a href="mailto:pjatzek@mail.hypermart.net">pjatzek@mail.hypermart.net</a>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
The Author: Philip John Jatzek</font></b></p>
<hr>
      <p style="word-spacing: 0; text-indent: 0; margin: 0" align="center">&nbsp;
    </td></tr><!--msnavigation--></table>

</body>

</html>

